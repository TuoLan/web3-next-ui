{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@wagmi/core/src/actions/getAccount.ts"],"sourcesContent":["import type { Address, Chain } from 'viem'\n\nimport type { Config, Connector } from '../createConfig.js'\n\nexport type GetAccountReturnType<\n  config extends Config = Config,\n  ///\n  chain = Config extends config ? Chain : config['chains'][number],\n> =\n  | {\n      address: Address\n      addresses: readonly [Address, ...Address[]]\n      chain: chain | undefined\n      chainId: number\n      connector: Connector\n      isConnected: true\n      isConnecting: false\n      isDisconnected: false\n      isReconnecting: false\n      status: 'connected'\n    }\n  | {\n      address: Address | undefined\n      addresses: readonly Address[] | undefined\n      chain: chain | undefined\n      chainId: number | undefined\n      connector: Connector | undefined\n      isConnected: boolean\n      isConnecting: false\n      isDisconnected: false\n      isReconnecting: true\n      status: 'reconnecting'\n    }\n  | {\n      address: Address | undefined\n      addresses: readonly Address[] | undefined\n      chain: chain | undefined\n      chainId: number | undefined\n      connector: Connector | undefined\n      isConnected: false\n      isReconnecting: false\n      isConnecting: true\n      isDisconnected: false\n      status: 'connecting'\n    }\n  | {\n      address: undefined\n      addresses: undefined\n      chain: undefined\n      chainId: undefined\n      connector: undefined\n      isConnected: false\n      isReconnecting: false\n      isConnecting: false\n      isDisconnected: true\n      status: 'disconnected'\n    }\n\n/** https://wagmi.sh/core/api/actions/getAccount */\nexport function getAccount<config extends Config>(\n  config: config,\n): GetAccountReturnType<config> {\n  const uid = config.state.current!\n  const connection = config.state.connections.get(uid)\n  const addresses = connection?.accounts\n  const address = addresses?.[0]\n  const chain = config.chains.find(\n    (chain) => chain.id === connection?.chainId,\n  ) as GetAccountReturnType<config>['chain']\n  const status = config.state.status\n\n  switch (status) {\n    case 'connected':\n      return {\n        address: address!,\n        addresses: addresses!,\n        chain,\n        chainId: connection?.chainId!,\n        connector: connection?.connector!,\n        isConnected: true,\n        isConnecting: false,\n        isDisconnected: false,\n        isReconnecting: false,\n        status,\n      }\n    case 'reconnecting':\n      return {\n        address,\n        addresses,\n        chain,\n        chainId: connection?.chainId,\n        connector: connection?.connector,\n        isConnected: !!address,\n        isConnecting: false,\n        isDisconnected: false,\n        isReconnecting: true,\n        status,\n      }\n    case 'connecting':\n      return {\n        address,\n        addresses,\n        chain,\n        chainId: connection?.chainId,\n        connector: connection?.connector,\n        isConnected: false,\n        isConnecting: true,\n        isDisconnected: false,\n        isReconnecting: false,\n        status,\n      }\n    case 'disconnected':\n      return {\n        address: undefined,\n        addresses: undefined,\n        chain: undefined,\n        chainId: undefined,\n        connector: undefined,\n        isConnected: false,\n        isConnecting: false,\n        isDisconnected: true,\n        isReconnecting: false,\n        status,\n      }\n  }\n}\n"],"names":[],"mappings":"AA0DA,iDAAA;;;AACM,SAAU,WACd,MAAc;IAEd,MAAM,MAAM,OAAO,KAAK,CAAC,OAAQ;IACjC,MAAM,aAAa,OAAO,KAAK,CAAC,WAAW,CAAC,GAAG,CAAC;IAChD,MAAM,YAAY,YAAY;IAC9B,MAAM,UAAU,WAAW,CAAC,EAAE;IAC9B,MAAM,QAAQ,OAAO,MAAM,CAAC,IAAI,CAC9B,CAAC,QAAU,MAAM,EAAE,KAAK,YAAY;IAEtC,MAAM,SAAS,OAAO,KAAK,CAAC,MAAM;IAElC,OAAQ;QACN,KAAK;YACH,OAAO;gBACL,SAAS;gBACT,WAAW;gBACX;gBACA,SAAS,YAAY;gBACrB,WAAW,YAAY;gBACvB,aAAa;gBACb,cAAc;gBACd,gBAAgB;gBAChB,gBAAgB;gBAChB;;QAEJ,KAAK;YACH,OAAO;gBACL;gBACA;gBACA;gBACA,SAAS,YAAY;gBACrB,WAAW,YAAY;gBACvB,aAAa,CAAC,CAAC;gBACf,cAAc;gBACd,gBAAgB;gBAChB,gBAAgB;gBAChB;;QAEJ,KAAK;YACH,OAAO;gBACL;gBACA;gBACA;gBACA,SAAS,YAAY;gBACrB,WAAW,YAAY;gBACvB,aAAa;gBACb,cAAc;gBACd,gBAAgB;gBAChB,gBAAgB;gBAChB;;QAEJ,KAAK;YACH,OAAO;gBACL,SAAS;gBACT,WAAW;gBACX,OAAO;gBACP,SAAS;gBACT,WAAW;gBACX,aAAa;gBACb,cAAc;gBACd,gBAAgB;gBAChB,gBAAgB;gBAChB;;IAEN;AACF"}},
    {"offset": {"line": 70, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 75, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@wagmi/core/src/utils/deepEqual.ts"],"sourcesContent":["/** Forked from https://github.com/epoberezkin/fast-deep-equal */\n\nexport function deepEqual(a: any, b: any) {\n  if (a === b) return true\n\n  if (a && b && typeof a === 'object' && typeof b === 'object') {\n    if (a.constructor !== b.constructor) return false\n\n    let length: number\n    let i: number\n\n    if (Array.isArray(a) && Array.isArray(b)) {\n      length = a.length\n      if (length !== b.length) return false\n      for (i = length; i-- !== 0; ) if (!deepEqual(a[i], b[i])) return false\n      return true\n    }\n\n    if (a.valueOf !== Object.prototype.valueOf)\n      return a.valueOf() === b.valueOf()\n    if (a.toString !== Object.prototype.toString)\n      return a.toString() === b.toString()\n\n    const keys = Object.keys(a)\n    length = keys.length\n    if (length !== Object.keys(b).length) return false\n\n    for (i = length; i-- !== 0; )\n      if (!Object.prototype.hasOwnProperty.call(b, keys[i]!)) return false\n\n    for (i = length; i-- !== 0; ) {\n      const key = keys[i]\n\n      if (key && !deepEqual(a[key], b[key])) return false\n    }\n\n    return true\n  }\n\n  // true if both NaN, false otherwise\n  // biome-ignore lint/suspicious/noSelfCompare: <explanation>\n  return a !== a && b !== b\n}\n"],"names":[],"mappings":"AAAA,+DAAA;;;AAEM,SAAU,UAAU,CAAM,EAAE,CAAM;IACtC,IAAI,MAAM,GAAG,OAAO;IAEpB,IAAI,KAAK,KAAK,OAAO,MAAM,YAAY,OAAO,MAAM,UAAU;QAC5D,IAAI,EAAE,WAAW,KAAK,EAAE,WAAW,EAAE,OAAO;QAE5C,IAAI;QACJ,IAAI;QAEJ,IAAI,MAAM,OAAO,CAAC,MAAM,MAAM,OAAO,CAAC,IAAI;YACxC,SAAS,EAAE,MAAM;YACjB,IAAI,WAAW,EAAE,MAAM,EAAE,OAAO;YAChC,IAAK,IAAI,QAAQ,QAAQ,GAAK,IAAI,CAAC,UAAU,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG,OAAO;YACjE,OAAO;QACT;QAEA,IAAI,EAAE,OAAO,KAAK,OAAO,SAAS,CAAC,OAAO,EACxC,OAAO,EAAE,OAAO,OAAO,EAAE,OAAO;QAClC,IAAI,EAAE,QAAQ,KAAK,OAAO,SAAS,CAAC,QAAQ,EAC1C,OAAO,EAAE,QAAQ,OAAO,EAAE,QAAQ;QAEpC,MAAM,OAAO,OAAO,IAAI,CAAC;QACzB,SAAS,KAAK,MAAM;QACpB,IAAI,WAAW,OAAO,IAAI,CAAC,GAAG,MAAM,EAAE,OAAO;QAE7C,IAAK,IAAI,QAAQ,QAAQ,GACvB,IAAI,CAAC,OAAO,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,EAAG,GAAG,OAAO;QAEjE,IAAK,IAAI,QAAQ,QAAQ,GAAK;YAC5B,MAAM,MAAM,IAAI,CAAC,EAAE;YAEnB,IAAI,OAAO,CAAC,UAAU,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,IAAI,GAAG,OAAO;QAChD;QAEA,OAAO;IACT;IAEA,oCAAoC;IACpC,4DAA4D;IAC5D,OAAO,MAAM,KAAK,MAAM;AAC1B"}},
    {"offset": {"line": 106, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 111, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@wagmi/core/src/actions/watchAccount.ts"],"sourcesContent":["import type { Config } from '../createConfig.js'\nimport { deepEqual } from '../utils/deepEqual.js'\nimport { type GetAccountReturnType, getAccount } from './getAccount.js'\n\nexport type WatchAccountParameters<config extends Config = Config> = {\n  onChange(\n    account: GetAccountReturnType<config>,\n    prevAccount: GetAccountReturnType<config>,\n  ): void\n}\n\nexport type WatchAccountReturnType = () => void\n\n/** https://wagmi.sh/core/api/actions/watchAccount */\nexport function watchAccount<config extends Config>(\n  config: config,\n  parameters: WatchAccountParameters<config>,\n): WatchAccountReturnType {\n  const { onChange } = parameters\n\n  return config.subscribe(() => getAccount(config), onChange, {\n    equalityFn(a, b) {\n      const { connector: aConnector, ...aRest } = a\n      const { connector: bConnector, ...bRest } = b\n      return (\n        deepEqual(aRest, bRest) &&\n        // check connector separately\n        aConnector?.id === bConnector?.id &&\n        aConnector?.uid === bConnector?.uid\n      )\n    },\n  })\n}\n"],"names":[],"mappings":";;;;;;;;AAcM,SAAU,aACd,MAAc,EACd,UAA0C;IAE1C,MAAM,EAAE,QAAQ,EAAE,GAAG;IAErB,OAAO,OAAO,SAAS,CAAC,IAAM,CAAA,GAAA,mKAAA,CAAA,aAAU,AAAV,EAAW,SAAS,UAAU;QAC1D,YAAW,CAAC,EAAE,CAAC;YACb,MAAM,EAAE,WAAW,UAAU,EAAE,GAAG,OAAO,GAAG;YAC5C,MAAM,EAAE,WAAW,UAAU,EAAE,GAAG,OAAO,GAAG;YAC5C,OACE,CAAA,GAAA,gKAAA,CAAA,YAAS,AAAT,EAAU,OAAO,UACjB,6BAA6B;YAC7B,YAAY,OAAO,YAAY,MAC/B,YAAY,QAAQ,YAAY;QAEpC;;AAEJ"}},
    {"offset": {"line": 130, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 135, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@wagmi/core/src/actions/reconnect.ts"],"sourcesContent":["import type { Address } from 'viem'\n\nimport type { CreateConnectorFn } from '../connectors/createConnector.js'\nimport type { Config, Connection, Connector } from '../createConfig.js'\nimport type { ErrorType } from '../errors/base.js'\nimport type { Compute } from '../types/utils.js'\n\nexport type ReconnectParameters = {\n  /** Connectors to attempt reconnect with */\n  connectors?: readonly (CreateConnectorFn | Connector)[] | undefined\n}\n\nexport type ReconnectReturnType = Compute<Connection>[]\n\nexport type ReconnectErrorType = ErrorType\n\nlet isReconnecting = false\n\n/** https://wagmi.sh/core/api/actions/reconnect */\nexport async function reconnect(\n  config: Config,\n  parameters: ReconnectParameters = {},\n): Promise<ReconnectReturnType> {\n  // If already reconnecting, do nothing\n  if (isReconnecting) return []\n  isReconnecting = true\n\n  config.setState((x) => ({\n    ...x,\n    status: x.current ? 'reconnecting' : 'connecting',\n  }))\n\n  const connectors: Connector[] = []\n  if (parameters.connectors?.length) {\n    for (const connector_ of parameters.connectors) {\n      let connector: Connector\n      // \"Register\" connector if not already created\n      if (typeof connector_ === 'function')\n        connector = config._internal.connectors.setup(connector_)\n      else connector = connector_\n      connectors.push(connector)\n    }\n  } else connectors.push(...config.connectors)\n\n  // Try recently-used connectors first\n  let recentConnectorId: string | null | undefined\n  try {\n    recentConnectorId = await config.storage?.getItem('recentConnectorId')\n  } catch {}\n  const scores: Record<string, number> = {}\n  for (const [, connection] of config.state.connections) {\n    scores[connection.connector.id] = 1\n  }\n  if (recentConnectorId) scores[recentConnectorId] = 0\n  const sorted =\n    Object.keys(scores).length > 0\n      ? // .toSorted()\n        [...connectors].sort(\n          (a, b) => (scores[a.id] ?? 10) - (scores[b.id] ?? 10),\n        )\n      : connectors\n\n  // Iterate through each connector and try to connect\n  let connected = false\n  const connections: Connection[] = []\n  const providers: unknown[] = []\n  for (const connector of sorted) {\n    const provider = await connector.getProvider().catch(() => undefined)\n    if (!provider) continue\n\n    // If we already have an instance of this connector's provider,\n    // then we have already checked it (ie. injected connectors can\n    // share the same `window.ethereum` instance, so we don't want to\n    // connect to it again).\n    if (providers.some((x) => x === provider)) continue\n\n    const isAuthorized = await connector.isAuthorized()\n    if (!isAuthorized) continue\n\n    const data = await connector\n      .connect({ isReconnecting: true })\n      .catch(() => null)\n    if (!data) continue\n\n    connector.emitter.off('connect', config._internal.events.connect)\n    connector.emitter.on('change', config._internal.events.change)\n    connector.emitter.on('disconnect', config._internal.events.disconnect)\n\n    config.setState((x) => {\n      const connections = new Map(connected ? x.connections : new Map()).set(\n        connector.uid,\n        { accounts: data.accounts, chainId: data.chainId, connector },\n      )\n      return {\n        ...x,\n        current: connected ? x.current : connector.uid,\n        connections,\n      }\n    })\n    connections.push({\n      accounts: data.accounts as readonly [Address, ...Address[]],\n      chainId: data.chainId,\n      connector,\n    })\n    providers.push(provider)\n    connected = true\n  }\n\n  // Prevent overwriting connected status from race condition\n  if (\n    config.state.status === 'reconnecting' ||\n    config.state.status === 'connecting'\n  ) {\n    // If connecting didn't succeed, set to disconnected\n    if (!connected)\n      config.setState((x) => ({\n        ...x,\n        connections: new Map(),\n        current: null,\n        status: 'disconnected',\n      }))\n    else config.setState((x) => ({ ...x, status: 'connected' }))\n  }\n\n  isReconnecting = false\n  return connections\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 228, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 233, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@wagmi/core/src/hydrate.ts"],"sourcesContent":["import { reconnect } from './actions/reconnect.js'\nimport type { Config, State } from './createConfig.js'\n\ntype HydrateParameters = {\n  initialState?: State | undefined\n  reconnectOnMount?: boolean | undefined\n}\n\nexport function hydrate(config: Config, parameters: HydrateParameters) {\n  const { initialState, reconnectOnMount } = parameters\n\n  if (initialState && !config._internal.store.persist.hasHydrated())\n    config.setState({\n      ...initialState,\n      chainId: config.chains.some((x) => x.id === initialState.chainId)\n        ? initialState.chainId\n        : config.chains[0].id,\n      connections: reconnectOnMount ? initialState.connections : new Map(),\n      status: reconnectOnMount ? 'reconnecting' : 'disconnected',\n    })\n\n  return {\n    async onMount() {\n      if (config._internal.ssr) {\n        await config._internal.store.persist.rehydrate()\n        if (config._internal.mipd) {\n          config._internal.connectors.setState((connectors) => {\n            const rdnsSet = new Set<string>()\n            for (const connector of connectors ?? []) {\n              if (connector.rdns) rdnsSet.add(connector.rdns)\n            }\n            const mipdConnectors = []\n            const providers = config._internal.mipd?.getProviders() ?? []\n            for (const provider of providers) {\n              if (rdnsSet.has(provider.info.rdns)) continue\n              const connectorFn =\n                config._internal.connectors.providerDetailToConnector(provider)\n              const connector = config._internal.connectors.setup(connectorFn)\n              mipdConnectors.push(connector)\n            }\n            return [...connectors, ...mipdConnectors]\n          })\n        }\n      }\n\n      if (reconnectOnMount) reconnect(config)\n      else if (config.storage)\n        // Reset connections that may have been hydrated from storage.\n        config.setState((x) => ({\n          ...x,\n          connections: new Map(),\n        }))\n    },\n  }\n}\n"],"names":[],"mappings":";;;;;;AAQM,SAAU,QAAQ,MAAc,EAAE,UAA6B;IACnE,MAAM,EAAE,YAAY,EAAE,gBAAgB,EAAE,GAAG;IAE3C,IAAI,gBAAgB,CAAC,OAAO,SAAS,CAAC,KAAK,CAAC,OAAO,CAAC,WAAW,IAC7D,OAAO,QAAQ,CAAC;QACd,GAAG,YAAY;QACf,SAAS,OAAO,MAAM,CAAC,IAAI,CAAC,CAAC,IAAM,EAAE,EAAE,KAAK,aAAa,OAAO,IAC5D,aAAa,OAAO,GACpB,OAAO,MAAM,CAAC,EAAE,CAAC,EAAE;QACvB,aAAa,mBAAmB,aAAa,WAAW,GAAG,IAAI;QAC/D,QAAQ,mBAAmB,iBAAiB;;IAGhD,OAAO;QACL,MAAM;YACJ,IAAI,OAAO,SAAS,CAAC,GAAG,EAAE;gBACxB,MAAM,OAAO,SAAS,CAAC,KAAK,CAAC,OAAO,CAAC,SAAS;gBAC9C,IAAI,OAAO,SAAS,CAAC,IAAI,EAAE;oBACzB,OAAO,SAAS,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;wBACpC,MAAM,UAAU,IAAI;wBACpB,KAAK,MAAM,aAAa,cAAc,EAAE,CAAE;4BACxC,IAAI,UAAU,IAAI,EAAE,QAAQ,GAAG,CAAC,UAAU,IAAI;wBAChD;wBACA,MAAM,iBAAiB,EAAE;wBACzB,MAAM,YAAY,OAAO,SAAS,CAAC,IAAI,EAAE,kBAAkB,EAAE;wBAC7D,KAAK,MAAM,YAAY,UAAW;4BAChC,IAAI,QAAQ,GAAG,CAAC,SAAS,IAAI,CAAC,IAAI,GAAG;4BACrC,MAAM,cACJ,OAAO,SAAS,CAAC,UAAU,CAAC,yBAAyB,CAAC;4BACxD,MAAM,YAAY,OAAO,SAAS,CAAC,UAAU,CAAC,KAAK,CAAC;4BACpD,eAAe,IAAI,CAAC;wBACtB;wBACA,OAAO;+BAAI;+BAAe;yBAAe;oBAC3C;gBACF;YACF;YAEA,IAAI,kBAAkB,CAAA,GAAA,kKAAA,CAAA,YAAS,AAAT,EAAU;iBAC3B,IAAI,OAAO,OAAO,EACrB,8DAA8D;YAC9D,OAAO,QAAQ,CAAC,CAAC,IAAM,CAAC;oBACtB,GAAG,CAAC;oBACJ,aAAa,IAAI;iBAClB;QACL;;AAEJ"}},
    {"offset": {"line": 281, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 286, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@wagmi/core/src/version.ts"],"sourcesContent":["export const version = '2.14.1'\n"],"names":[],"mappings":";;;AAAO,MAAM,UAAU"}},
    {"offset": {"line": 290, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 295, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@wagmi/core/src/utils/getVersion.ts"],"sourcesContent":["import { version } from '../version.js'\n\nexport const getVersion = () => `@wagmi/core@${version}`\n"],"names":[],"mappings":";;;;;;AAEO,MAAM,aAAa,IAAM,CAAA,YAAA,EAAe,qJAAA,CAAA,UAAO,CAAA,CAAE"}},
    {"offset": {"line": 302, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 307, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@wagmi/core/src/errors/base.ts"],"sourcesContent":["import type { Compute, OneOf } from '../types/utils.js'\nimport { getVersion } from '../utils/getVersion.js'\n\nexport type ErrorType<name extends string = 'Error'> = Error & { name: name }\n\ntype BaseErrorOptions = Compute<\n  OneOf<{ details?: string | undefined } | { cause: BaseError | Error }> & {\n    docsPath?: string | undefined\n    docsSlug?: string | undefined\n    metaMessages?: string[] | undefined\n  }\n>\n\nexport type BaseErrorType = BaseError & { name: 'WagmiCoreError' }\nexport class BaseError extends Error {\n  details: string\n  docsPath?: string | undefined\n  metaMessages?: string[] | undefined\n  shortMessage: string\n\n  override name = 'WagmiCoreError'\n  get docsBaseUrl() {\n    return 'https://wagmi.sh/core'\n  }\n  get version() {\n    return getVersion()\n  }\n\n  constructor(shortMessage: string, options: BaseErrorOptions = {}) {\n    super()\n\n    const details =\n      options.cause instanceof BaseError\n        ? options.cause.details\n        : options.cause?.message\n          ? options.cause.message\n          : options.details!\n    const docsPath =\n      options.cause instanceof BaseError\n        ? options.cause.docsPath || options.docsPath\n        : options.docsPath\n\n    this.message = [\n      shortMessage || 'An error occurred.',\n      '',\n      ...(options.metaMessages ? [...options.metaMessages, ''] : []),\n      ...(docsPath\n        ? [\n            `Docs: ${this.docsBaseUrl}${docsPath}.html${\n              options.docsSlug ? `#${options.docsSlug}` : ''\n            }`,\n          ]\n        : []),\n      ...(details ? [`Details: ${details}`] : []),\n      `Version: ${this.version}`,\n    ].join('\\n')\n\n    if (options.cause) this.cause = options.cause\n    this.details = details\n    this.docsPath = docsPath\n    this.metaMessages = options.metaMessages\n    this.shortMessage = shortMessage\n  }\n\n  walk(fn?: (err: unknown) => boolean) {\n    return this.#walk(this, fn)\n  }\n\n  #walk(err: unknown, fn?: (err: unknown) => boolean): unknown {\n    if (fn?.(err)) return err\n    if ((err as Error).cause) return this.#walk((err as Error).cause, fn)\n    return err\n  }\n}\n"],"names":[],"mappings":";;;;;;;;;;;;AAcM,MAAO,kBAAkB;IAO7B,IAAI,cAAW;QACb,OAAO;IACT;IACA,IAAI,UAAO;QACT,OAAO,CAAA,GAAA,iKAAA,CAAA,aAAU,AAAV;IACT;IAEA,YAAY,YAAoB,EAAE,UAA4B,CAAA,CAAE,CAAA;QAC9D,KAAK;;QAdP,OAAA,cAAA,CAAA,IAAA,EAAA,WAAA;;;;;;QACA,OAAA,cAAA,CAAA,IAAA,EAAA,YAAA;;;;;;QACA,OAAA,cAAA,CAAA,IAAA,EAAA,gBAAA;;;;;;QACA,OAAA,cAAA,CAAA,IAAA,EAAA,gBAAA;;;;;;QAES,OAAA,cAAA,CAAA,IAAA,EAAA,QAAA;;;;mBAAO;;QAWd,MAAM,UACJ,QAAQ,KAAK,YAAY,YACrB,QAAQ,KAAK,CAAC,OAAO,GACrB,QAAQ,KAAK,EAAE,UACb,QAAQ,KAAK,CAAC,OAAO,GACrB,QAAQ,OAAQ;QACxB,MAAM,WACJ,QAAQ,KAAK,YAAY,YACrB,QAAQ,KAAK,CAAC,QAAQ,IAAI,QAAQ,QAAQ,GAC1C,QAAQ,QAAQ;QAEtB,IAAI,CAAC,OAAO,GAAG;YACb,gBAAgB;YAChB;eACI,QAAQ,YAAY,GAAG;mBAAI,QAAQ,YAAY;gBAAE;aAAG,GAAG,EAAE;eACzD,WACA;gBACE,CAAA,MAAA,EAAS,IAAI,CAAC,WAAW,CAAA,EAAG,SAAQ,KAAA,EAClC,QAAQ,QAAQ,GAAG,CAAA,CAAA,EAAI,QAAQ,QAAQ,CAAA,CAAE,GAAG,GAC9C,CAAE;aACH,GACD,EAAE;eACF,UAAU;gBAAC,CAAA,SAAA,EAAY,QAAO,CAAE;aAAC,GAAG,EAAE;YAC1C,CAAA,SAAA,EAAY,IAAI,CAAC,OAAO,CAAA,CAAE;SAC3B,CAAC,IAAI,CAAC;QAEP,IAAI,QAAQ,KAAK,EAAE,IAAI,CAAC,KAAK,GAAG,QAAQ,KAAK;QAC7C,IAAI,CAAC,OAAO,GAAG;QACf,IAAI,CAAC,QAAQ,GAAG;QAChB,IAAI,CAAC,YAAY,GAAG,QAAQ,YAAY;QACxC,IAAI,CAAC,YAAY,GAAG;IACtB;IAEA,KAAK,EAA8B,EAAA;QACjC,OAAO,uBAAA,IAAI,EAAA,sBAAA,KAAA,iBAAM,IAAA,CAAV,IAAI,EAAO,IAAI,EAAE;IAC1B;;iFAEM,GAAY,EAAE,EAA8B;IAChD,IAAI,KAAK,MAAM,OAAO;IACtB,IAAK,IAAc,KAAK,EAAE,OAAO,uBAAA,IAAI,EAAA,sBAAA,KAAA,iBAAM,IAAA,CAAV,IAAI,EAAQ,IAAc,KAAK,EAAE;IAClE,OAAO;AACT"}},
    {"offset": {"line": 391, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 396, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@wagmi/core/src/utils/getAction.ts"],"sourcesContent":["import type {\n  Account,\n  Chain,\n  Client,\n  PublicActions,\n  RpcSchema,\n  Transport,\n  WalletActions,\n} from 'viem'\n\n/**\n * Retrieves and returns an action from the client (if exists), and falls\n * back to the tree-shakable action.\n *\n * Useful for extracting overridden actions from a client (ie. if a consumer\n * wants to override the `sendTransaction` implementation).\n */\nexport function getAction<\n  transport extends Transport,\n  chain extends Chain | undefined,\n  account extends Account | undefined,\n  rpcSchema extends RpcSchema | undefined,\n  extended extends { [key: string]: unknown },\n  client extends Client<transport, chain, account, rpcSchema, extended>,\n  parameters,\n  returnType,\n>(\n  client: client,\n  actionFn: (_: any, parameters: parameters) => returnType,\n  // Some minifiers drop `Function.prototype.name`, or replace it with short letters,\n  // meaning that `actionFn.name` will not always work. For that case, the consumer\n  // needs to pass the name explicitly.\n  name: keyof PublicActions | keyof WalletActions,\n): (parameters: parameters) => returnType {\n  const action_implicit = client[actionFn.name]\n  if (typeof action_implicit === 'function')\n    return action_implicit as (params: parameters) => returnType\n\n  const action_explicit = client[name]\n  if (typeof action_explicit === 'function')\n    return action_explicit as (params: parameters) => returnType\n\n  return (params) => actionFn(client, params)\n}\n"],"names":[],"mappings":"AAUA;;;;;;;;;AAOM,SAAU,UAUd,MAAc,EACd,QAAwD,EACxD,mFAAmF;AACnF,iFAAiF;AACjF,qCAAqC;AACrC,IAA+C;IAE/C,MAAM,kBAAkB,MAAM,CAAC,SAAS,IAAI,CAAC;IAC7C,IAAI,OAAO,oBAAoB,YAC7B,OAAO;IAET,MAAM,kBAAkB,MAAM,CAAC,KAAK;IACpC,IAAI,OAAO,oBAAoB,YAC7B,OAAO;IAET,OAAO,CAAC,SAAW,SAAS,QAAQ;AACtC"}},
    {"offset": {"line": 415, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 420, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@wagmi/core/src/actions/getEnsAvatar.ts"],"sourcesContent":["import {\n  type GetEnsAvatarErrorType as viem_GetEnsAvatarErrorType,\n  type GetEnsAvatarParameters as viem_GetEnsAvatarParameters,\n  type GetEnsAvatarReturnType as viem_GetEnsAvatarReturnType,\n  getEnsAvatar as viem_getEnsAvatar,\n} from 'viem/actions'\n\nimport type { Config } from '../createConfig.js'\nimport type { ChainIdParameter } from '../types/properties.js'\nimport type { Compute } from '../types/utils.js'\nimport { getAction } from '../utils/getAction.js'\n\nexport type GetEnsAvatarParameters<config extends Config = Config> = Compute<\n  viem_GetEnsAvatarParameters & ChainIdParameter<config>\n>\n\nexport type GetEnsAvatarReturnType = viem_GetEnsAvatarReturnType\n\nexport type GetEnsAvatarErrorType = viem_GetEnsAvatarErrorType\n\n/** https://wagmi.sh/core/api/actions/getEnsAvatar */\nexport function getEnsAvatar<config extends Config>(\n  config: config,\n  parameters: GetEnsAvatarParameters<config>,\n): Promise<GetEnsAvatarReturnType> {\n  const { chainId, ...rest } = parameters\n  const client = config.getClient({ chainId })\n  const action = getAction(client, viem_getEnsAvatar, 'getEnsAvatar')\n  return action(rest)\n}\n"],"names":[],"mappings":";;;;;;;;AAqBM,SAAU,aACd,MAAc,EACd,UAA0C;IAE1C,MAAM,EAAE,OAAO,EAAE,GAAG,MAAM,GAAG;IAC7B,MAAM,SAAS,OAAO,SAAS,CAAC;QAAE;IAAO;IACzC,MAAM,SAAS,CAAA,GAAA,gKAAA,CAAA,YAAS,AAAT,EAAU,QAAQ,0JAAA,CAAA,eAAiB,EAAE;IACpD,OAAO,OAAO;AAChB"}},
    {"offset": {"line": 436, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 441, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@wagmi/core/src/query/utils.ts"],"sourcesContent":["import { type QueryKey, replaceEqualDeep } from '@tanstack/query-core'\nimport { deepEqual } from '../utils/deepEqual.js'\n\nexport function structuralSharing<data>(\n  oldData: data | undefined,\n  newData: data,\n): data {\n  if (deepEqual(oldData, newData)) return oldData as data\n  return replaceEqualDeep(oldData, newData)\n}\n\nexport function hashFn(queryKey: QueryKey): string {\n  return JSON.stringify(queryKey, (_, value) => {\n    if (isPlainObject(value))\n      return Object.keys(value)\n        .sort()\n        .reduce((result, key) => {\n          result[key] = value[key]\n          return result\n        }, {} as any)\n    if (typeof value === 'bigint') return value.toString()\n    return value\n  })\n}\n\n// biome-ignore lint/complexity/noBannedTypes:\nfunction isPlainObject(value: any): value is Object {\n  if (!hasObjectPrototype(value)) {\n    return false\n  }\n\n  // If has modified constructor\n  const ctor = value.constructor\n  if (typeof ctor === 'undefined') return true\n\n  // If has modified prototype\n  const prot = ctor.prototype\n  if (!hasObjectPrototype(prot)) return false\n\n  // If constructor does not have an Object-specific method\n  // biome-ignore lint/suspicious/noPrototypeBuiltins: <explanation>\n  if (!prot.hasOwnProperty('isPrototypeOf')) return false\n\n  // Most likely a plain Object\n  return true\n}\n\nfunction hasObjectPrototype(o: any): boolean {\n  return Object.prototype.toString.call(o) === '[object Object]'\n}\n\nexport function filterQueryOptions<type extends Record<string, unknown>>(\n  options: type,\n): type {\n  // destructuring is super fast\n  // biome-ignore format: no formatting\n  const {\n    // import('@tanstack/query-core').QueryOptions\n    _defaulted, behavior, gcTime, initialData, initialDataUpdatedAt, maxPages, meta, networkMode, queryFn, queryHash, queryKey, queryKeyHashFn, retry, retryDelay, structuralSharing,\n\n    // import('@tanstack/query-core').InfiniteQueryObserverOptions\n    getPreviousPageParam, getNextPageParam, initialPageParam,\n    \n    // import('@tanstack/react-query').UseQueryOptions\n    _optimisticResults, enabled, notifyOnChangeProps, placeholderData, refetchInterval, refetchIntervalInBackground, refetchOnMount, refetchOnReconnect, refetchOnWindowFocus, retryOnMount, select, staleTime, suspense, throwOnError,\n\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    // wagmi\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    config, connector, query,\n    ...rest\n  } = options\n\n  return rest as type\n}\n"],"names":[],"mappings":";;;;;;;;;;AAGM,SAAU,kBACd,OAAyB,EACzB,OAAa;IAEb,IAAI,CAAA,GAAA,gKAAA,CAAA,YAAS,AAAT,EAAU,SAAS,UAAU,OAAO;IACxC,OAAO,CAAA,GAAA,mKAAA,CAAA,mBAAgB,AAAhB,EAAiB,SAAS;AACnC;AAEM,SAAU,OAAO,QAAkB;IACvC,OAAO,KAAK,SAAS,CAAC,UAAU,CAAC,GAAG;QAClC,IAAI,cAAc,QAChB,OAAO,OAAO,IAAI,CAAC,OAChB,IAAI,GACJ,MAAM,CAAC,CAAC,QAAQ;YACf,MAAM,CAAC,IAAI,GAAG,KAAK,CAAC,IAAI;YACxB,OAAO;QACT,GAAG,CAAA;QACP,IAAI,OAAO,UAAU,UAAU,OAAO,MAAM,QAAQ;QACpD,OAAO;IACT;AACF;AAEA,8CAA8C;AAC9C,SAAS,cAAc,KAAU;IAC/B,IAAI,CAAC,mBAAmB,QAAQ;QAC9B,OAAO;IACT;IAEA,8BAA8B;IAC9B,MAAM,OAAO,MAAM,WAAW;IAC9B,IAAI,OAAO,SAAS,aAAa,OAAO;IAExC,4BAA4B;IAC5B,MAAM,OAAO,KAAK,SAAS;IAC3B,IAAI,CAAC,mBAAmB,OAAO,OAAO;IAEtC,yDAAyD;IACzD,kEAAkE;IAClE,IAAI,CAAC,KAAK,cAAc,CAAC,kBAAkB,OAAO;IAElD,6BAA6B;IAC7B,OAAO;AACT;AAEA,SAAS,mBAAmB,CAAM;IAChC,OAAO,OAAO,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO;AAC/C;AAEM,SAAU,mBACd,OAAa;IAEb,8BAA8B;IAC9B,qCAAqC;IACrC,MAAM,EACJ,8CAA8C;IAC9C,UAAU,EAAE,QAAQ,EAAE,MAAM,EAAE,WAAW,EAAE,oBAAoB,EAAE,QAAQ,EAAE,IAAI,EAAE,WAAW,EAAE,OAAO,EAAE,SAAS,EAAE,QAAQ,EAAE,cAAc,EAAE,KAAK,EAAE,UAAU,EAAE,iBAAiB,EAEhL,8DAA8D;IAC9D,oBAAoB,EAAE,gBAAgB,EAAE,gBAAgB,EAExD,kDAAkD;IAClD,kBAAkB,EAAE,OAAO,EAAE,mBAAmB,EAAE,eAAe,EAAE,eAAe,EAAE,2BAA2B,EAAE,cAAc,EAAE,kBAAkB,EAAE,oBAAoB,EAAE,YAAY,EAAE,MAAM,EAAE,SAAS,EAAE,QAAQ,EAAE,YAAY,EAElO,gIAAgI;IAChI,QAAQ;IACR,gIAAgI;IAChI,MAAM,EAAE,SAAS,EAAE,KAAK,EACxB,GAAG,MACJ,GAAG;IAEJ,OAAO;AACT"}},
    {"offset": {"line": 497, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 502, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@wagmi/core/src/query/getEnsAvatar.ts"],"sourcesContent":["import type { QueryOptions } from '@tanstack/query-core'\n\nimport {\n  type GetEnsAvatarErrorType,\n  type GetEnsAvatarParameters,\n  type GetEnsAvatarReturnType,\n  getEnsAvatar,\n} from '../actions/getEnsAvatar.js'\nimport type { Config } from '../createConfig.js'\nimport type { ScopeKeyParameter } from '../types/properties.js'\nimport type { Compute, ExactPartial } from '../types/utils.js'\nimport { filterQueryOptions } from './utils.js'\n\nexport type GetEnsAvatarOptions<config extends Config> = Compute<\n  ExactPartial<GetEnsAvatarParameters<config>> & ScopeKeyParameter\n>\n\nexport function getEnsAvatarQueryOptions<config extends Config>(\n  config: config,\n  options: GetEnsAvatarOptions<config> = {},\n) {\n  return {\n    async queryFn({ queryKey }) {\n      const { name, scopeKey: _, ...parameters } = queryKey[1]\n      if (!name) throw new Error('name is required')\n      return getEnsAvatar(config, { ...parameters, name })\n    },\n    queryKey: getEnsAvatarQueryKey(options),\n  } as const satisfies QueryOptions<\n    GetEnsAvatarQueryFnData,\n    GetEnsAvatarErrorType,\n    GetEnsAvatarData,\n    GetEnsAvatarQueryKey<config>\n  >\n}\n\nexport type GetEnsAvatarQueryFnData = GetEnsAvatarReturnType\n\nexport type GetEnsAvatarData = GetEnsAvatarQueryFnData\n\nexport function getEnsAvatarQueryKey<config extends Config>(\n  options: GetEnsAvatarOptions<config> = {},\n) {\n  return ['ensAvatar', filterQueryOptions(options)] as const\n}\n\nexport type GetEnsAvatarQueryKey<config extends Config> = ReturnType<\n  typeof getEnsAvatarQueryKey<config>\n>\n"],"names":[],"mappings":";;;;;;;;;AAiBM,SAAU,yBACd,MAAc,EACd,UAAuC,CAAA,CAAE;IAEzC,OAAO;QACL,MAAM,SAAQ,EAAE,QAAQ,EAAE;YACxB,MAAM,EAAE,IAAI,EAAE,UAAU,CAAC,EAAE,GAAG,YAAY,GAAG,QAAQ,CAAC,EAAE;YACxD,IAAI,CAAC,MAAM,MAAM,IAAI,MAAM;YAC3B,OAAO,CAAA,GAAA,qKAAA,CAAA,eAAY,AAAZ,EAAa,QAAQ;gBAAE,GAAG,UAAU;gBAAE;YAAI;QACnD;QACA,UAAU,qBAAqB;;AAOnC;AAMM,SAAU,qBACd,UAAuC,CAAA,CAAE;IAEzC,OAAO;QAAC;QAAa,CAAA,GAAA,4JAAA,CAAA,qBAAkB,AAAlB,EAAmB;KAAkB;AAC5D"}},
    {"offset": {"line": 530, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 535, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@wagmi/core/src/actions/getChainId.ts"],"sourcesContent":["import type { Config } from '../createConfig.js'\n\nexport type GetChainIdReturnType<config extends Config = Config> =\n  config['chains'][number]['id']\n\n/** https://wagmi.sh/core/api/actions/getChainId */\nexport function getChainId<config extends Config>(\n  config: config,\n): GetChainIdReturnType<config> {\n  return config.state.chainId\n}\n"],"names":[],"mappings":"AAKA,iDAAA;;;AACM,SAAU,WACd,MAAc;IAEd,OAAO,OAAO,KAAK,CAAC,OAAO;AAC7B"}},
    {"offset": {"line": 541, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 546, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@wagmi/core/src/actions/watchChainId.ts"],"sourcesContent":["import type { Config } from '../createConfig.js'\nimport type { GetChainIdReturnType } from './getChainId.js'\n\nexport type WatchChainIdParameters<config extends Config = Config> = {\n  onChange(\n    chainId: GetChainIdReturnType<config>,\n    prevChainId: GetChainIdReturnType<config>,\n  ): void\n}\n\nexport type WatchChainIdReturnType = () => void\n\n/** https://wagmi.sh/core/api/actions/watchChainId */\nexport function watchChainId<config extends Config>(\n  config: config,\n  parameters: WatchChainIdParameters<config>,\n): WatchChainIdReturnType {\n  const { onChange } = parameters\n  return config.subscribe((state) => state.chainId, onChange)\n}\n"],"names":[],"mappings":"AAYA,mDAAA;;;AACM,SAAU,aACd,MAAc,EACd,UAA0C;IAE1C,MAAM,EAAE,QAAQ,EAAE,GAAG;IACrB,OAAO,OAAO,SAAS,CAAC,CAAC,QAAU,MAAM,OAAO,EAAE;AACpD"}},
    {"offset": {"line": 553, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 558, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@wagmi/core/src/actions/getEnsName.ts"],"sourcesContent":["import {\n  type GetEnsNameErrorType as viem_GetEnsNameErrorType,\n  type GetEnsNameParameters as viem_GetEnsNameParameters,\n  type GetEnsNameReturnType as viem_GetEnsNameReturnType,\n  getEnsName as viem_getEnsName,\n} from 'viem/actions'\n\nimport type { Config } from '../createConfig.js'\nimport type { ChainIdParameter } from '../types/properties.js'\nimport type { Compute } from '../types/utils.js'\nimport { getAction } from '../utils/getAction.js'\n\nexport type GetEnsNameParameters<config extends Config = Config> = Compute<\n  viem_GetEnsNameParameters & ChainIdParameter<config>\n>\n\nexport type GetEnsNameReturnType = viem_GetEnsNameReturnType\n\nexport type GetEnsNameErrorType = viem_GetEnsNameErrorType\n\n/** https://wagmi.sh/core/api/actions/getEnsName */\nexport function getEnsName<config extends Config>(\n  config: config,\n  parameters: GetEnsNameParameters<config>,\n): Promise<GetEnsNameReturnType> {\n  const { chainId, ...rest } = parameters\n  const client = config.getClient({ chainId })\n  const action = getAction(client, viem_getEnsName, 'getEnsName')\n  return action(rest)\n}\n"],"names":[],"mappings":";;;;;;;;AAqBM,SAAU,WACd,MAAc,EACd,UAAwC;IAExC,MAAM,EAAE,OAAO,EAAE,GAAG,MAAM,GAAG;IAC7B,MAAM,SAAS,OAAO,SAAS,CAAC;QAAE;IAAO;IACzC,MAAM,SAAS,CAAA,GAAA,gKAAA,CAAA,YAAS,AAAT,EAAU,QAAQ,wJAAA,CAAA,aAAe,EAAE;IAClD,OAAO,OAAO;AAChB"}},
    {"offset": {"line": 574, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 579, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@wagmi/core/src/query/getEnsName.ts"],"sourcesContent":["import type { QueryOptions } from '@tanstack/query-core'\n\nimport {\n  type GetEnsNameErrorType,\n  type GetEnsNameParameters,\n  type GetEnsNameReturnType,\n  getEnsName,\n} from '../actions/getEnsName.js'\nimport type { Config } from '../createConfig.js'\nimport type { ScopeKeyParameter } from '../types/properties.js'\nimport type { Compute, ExactPartial } from '../types/utils.js'\nimport { filterQueryOptions } from './utils.js'\n\nexport type GetEnsNameOptions<config extends Config> = Compute<\n  ExactPartial<GetEnsNameParameters<config>> & ScopeKeyParameter\n>\n\nexport function getEnsNameQueryOptions<config extends Config>(\n  config: config,\n  options: GetEnsNameOptions<config> = {},\n) {\n  return {\n    async queryFn({ queryKey }) {\n      const { address, scopeKey: _, ...parameters } = queryKey[1]\n      if (!address) throw new Error('address is required')\n      return getEnsName(config, { ...parameters, address })\n    },\n    queryKey: getEnsNameQueryKey(options),\n  } as const satisfies QueryOptions<\n    GetEnsNameQueryFnData,\n    GetEnsNameErrorType,\n    GetEnsNameData,\n    GetEnsNameQueryKey<config>\n  >\n}\n\nexport type GetEnsNameQueryFnData = GetEnsNameReturnType\n\nexport type GetEnsNameData = GetEnsNameQueryFnData\n\nexport function getEnsNameQueryKey<config extends Config>(\n  options: GetEnsNameOptions<config> = {},\n) {\n  return ['ensName', filterQueryOptions(options)] as const\n}\n\nexport type GetEnsNameQueryKey<config extends Config> = ReturnType<\n  typeof getEnsNameQueryKey<config>\n>\n"],"names":[],"mappings":";;;;;;;;;AAiBM,SAAU,uBACd,MAAc,EACd,UAAqC,CAAA,CAAE;IAEvC,OAAO;QACL,MAAM,SAAQ,EAAE,QAAQ,EAAE;YACxB,MAAM,EAAE,OAAO,EAAE,UAAU,CAAC,EAAE,GAAG,YAAY,GAAG,QAAQ,CAAC,EAAE;YAC3D,IAAI,CAAC,SAAS,MAAM,IAAI,MAAM;YAC9B,OAAO,CAAA,GAAA,mKAAA,CAAA,aAAU,AAAV,EAAW,QAAQ;gBAAE,GAAG,UAAU;gBAAE;YAAO;QACpD;QACA,UAAU,mBAAmB;;AAOjC;AAMM,SAAU,mBACd,UAAqC,CAAA,CAAE;IAEvC,OAAO;QAAC;QAAW,CAAA,GAAA,4JAAA,CAAA,qBAAkB,AAAlB,EAAmB;KAAkB;AAC1D"}},
    {"offset": {"line": 607, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 612, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@wagmi/core/src/utils/getUnit.ts"],"sourcesContent":["import { weiUnits } from 'viem'\n\nimport type { Unit } from '../types/unit.js'\n\nexport function getUnit(unit: Unit) {\n  if (typeof unit === 'number') return unit\n  if (unit === 'wei') return 0\n  return Math.abs(weiUnits[unit])\n}\n"],"names":[],"mappings":";;;;;;AAIM,SAAU,QAAQ,IAAU;IAChC,IAAI,OAAO,SAAS,UAAU,OAAO;IACrC,IAAI,SAAS,OAAO,OAAO;IAC3B,OAAO,KAAK,GAAG,CAAC,6IAAA,CAAA,WAAQ,CAAC,KAAK;AAChC"}},
    {"offset": {"line": 623, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 628, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@wagmi/core/src/actions/multicall.ts"],"sourcesContent":["import type {\n  ContractFunctionParameters,\n  MulticallErrorType as viem_MulticallErrorType,\n  MulticallParameters as viem_MulticallParameters,\n  MulticallReturnType as viem_MulticallReturnType,\n} from 'viem'\nimport { multicall as viem_multicall } from 'viem/actions'\n\nimport type { Config } from '../createConfig.js'\nimport type { ChainIdParameter } from '../types/properties.js'\nimport { getAction } from '../utils/getAction.js'\n\nexport type MulticallParameters<\n  contracts extends readonly unknown[] = readonly ContractFunctionParameters[],\n  allowFailure extends boolean = true,\n  config extends Config = Config,\n> = viem_MulticallParameters<contracts, allowFailure> & ChainIdParameter<config>\n\nexport type MulticallReturnType<\n  contracts extends readonly unknown[] = readonly ContractFunctionParameters[],\n  allowFailure extends boolean = true,\n> = viem_MulticallReturnType<contracts, allowFailure>\n\nexport type MulticallErrorType = viem_MulticallErrorType\n\nexport async function multicall<\n  config extends Config,\n  const contracts extends readonly ContractFunctionParameters[],\n  allowFailure extends boolean = true,\n>(\n  config: config,\n  parameters: MulticallParameters<contracts, allowFailure, config>,\n): Promise<MulticallReturnType<contracts, allowFailure>> {\n  const { allowFailure = true, chainId, contracts, ...rest } = parameters\n  const client = config.getClient({ chainId })\n  const action = getAction(client, viem_multicall, 'multicall')\n  return action({\n    allowFailure,\n    contracts,\n    ...rest,\n  }) as Promise<MulticallReturnType<contracts, allowFailure>>\n}\n"],"names":[],"mappings":";;;;;;;;AAyBO,eAAe,UAKpB,MAAc,EACd,UAAgE;IAEhE,MAAM,EAAE,eAAe,IAAI,EAAE,OAAO,EAAE,SAAS,EAAE,GAAG,MAAM,GAAG;IAC7D,MAAM,SAAS,OAAO,SAAS,CAAC;QAAE;IAAO;IACzC,MAAM,SAAS,CAAA,GAAA,gKAAA,CAAA,YAAS,AAAT,EAAU,QAAQ,0JAAA,CAAA,YAAc,EAAE;IACjD,OAAO,OAAO;QACZ;QACA;QACA,GAAG,IAAI;;AAEX"}},
    {"offset": {"line": 648, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 653, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@wagmi/core/src/actions/readContract.ts"],"sourcesContent":["import type { Abi } from 'viem'\nimport type { ContractFunctionArgs, ContractFunctionName } from 'viem'\nimport {\n  type ReadContractErrorType as viem_ReadContractErrorType,\n  type ReadContractParameters as viem_ReadContractParameters,\n  type ReadContractReturnType as viem_ReadContractReturnType,\n  readContract as viem_readContract,\n} from 'viem/actions'\n\nimport type { Config } from '../createConfig.js'\nimport type { ChainIdParameter } from '../types/properties.js'\nimport { getAction } from '../utils/getAction.js'\n\nexport type ReadContractParameters<\n  abi extends Abi | readonly unknown[] = Abi,\n  functionName extends ContractFunctionName<\n    abi,\n    'pure' | 'view'\n  > = ContractFunctionName<abi, 'pure' | 'view'>,\n  args extends ContractFunctionArgs<\n    abi,\n    'pure' | 'view',\n    functionName\n  > = ContractFunctionArgs<abi, 'pure' | 'view', functionName>,\n  config extends Config = Config,\n> = viem_ReadContractParameters<abi, functionName, args> &\n  ChainIdParameter<config>\n\nexport type ReadContractReturnType<\n  abi extends Abi | readonly unknown[] = Abi,\n  functionName extends ContractFunctionName<\n    abi,\n    'pure' | 'view'\n  > = ContractFunctionName<abi, 'pure' | 'view'>,\n  args extends ContractFunctionArgs<\n    abi,\n    'pure' | 'view',\n    functionName\n  > = ContractFunctionArgs<abi, 'pure' | 'view', functionName>,\n> = viem_ReadContractReturnType<abi, functionName, args>\n\nexport type ReadContractErrorType = viem_ReadContractErrorType\n\n/** https://wagmi.sh/core/api/actions/readContract */\nexport function readContract<\n  config extends Config,\n  const abi extends Abi | readonly unknown[],\n  functionName extends ContractFunctionName<abi, 'pure' | 'view'>,\n  args extends ContractFunctionArgs<abi, 'pure' | 'view', functionName>,\n>(\n  config: config,\n  parameters: ReadContractParameters<abi, functionName, args, config>,\n): Promise<ReadContractReturnType<abi, functionName, args>> {\n  const { chainId, ...rest } = parameters\n  const client = config.getClient({ chainId })\n  const action = getAction(client, viem_readContract, 'readContract')\n  return action(rest as any)\n}\n"],"names":[],"mappings":";;;;;;;;AA4CM,SAAU,aAMd,MAAc,EACd,UAAmE;IAEnE,MAAM,EAAE,OAAO,EAAE,GAAG,MAAM,GAAG;IAC7B,MAAM,SAAS,OAAO,SAAS,CAAC;QAAE;IAAO;IACzC,MAAM,SAAS,CAAA,GAAA,gKAAA,CAAA,YAAS,AAAT,EAAU,QAAQ,6JAAA,CAAA,eAAiB,EAAE;IACpD,OAAO,OAAO;AAChB"}},
    {"offset": {"line": 669, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 674, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@wagmi/core/src/actions/readContracts.ts"],"sourcesContent":["import type {\n  ContractFunctionParameters,\n  MulticallParameters as viem_MulticallParameters,\n  MulticallReturnType as viem_MulticallReturnType,\n} from 'viem'\nimport { ContractFunctionExecutionError } from 'viem'\n\nimport type { Config } from '../createConfig.js'\nimport type { ChainIdParameter } from '../types/properties.js'\nimport { type MulticallErrorType, multicall } from './multicall.js'\nimport { type ReadContractErrorType, readContract } from './readContract.js'\n\nexport type ReadContractsParameters<\n  contracts extends readonly unknown[] = readonly ContractFunctionParameters[],\n  allowFailure extends boolean = true,\n  config extends Config = Config,\n> = viem_MulticallParameters<\n  contracts,\n  allowFailure,\n  { properties: ChainIdParameter<config> }\n>\n\nexport type ReadContractsReturnType<\n  contracts extends readonly unknown[] = readonly ContractFunctionParameters[],\n  allowFailure extends boolean = true,\n> = viem_MulticallReturnType<contracts, allowFailure>\n\nexport type ReadContractsErrorType = MulticallErrorType | ReadContractErrorType\n\nexport async function readContracts<\n  config extends Config,\n  const contracts extends readonly ContractFunctionParameters[],\n  allowFailure extends boolean = true,\n>(\n  config: config,\n  parameters: ReadContractsParameters<contracts, allowFailure, config>,\n): Promise<ReadContractsReturnType<contracts, allowFailure>> {\n  const { allowFailure = true, blockNumber, blockTag, ...rest } = parameters\n  const contracts = parameters.contracts as (ContractFunctionParameters & {\n    chainId?: number | undefined\n  })[]\n\n  try {\n    const contractsByChainId: {\n      [chainId: number]: {\n        contract: ContractFunctionParameters\n        index: number\n      }[]\n    } = {}\n    for (const [index, contract] of contracts.entries()) {\n      const chainId = contract.chainId ?? config.state.chainId\n      if (!contractsByChainId[chainId]) contractsByChainId[chainId] = []\n      contractsByChainId[chainId]?.push({ contract, index })\n    }\n    const promises = () =>\n      Object.entries(contractsByChainId).map(([chainId, contracts]) =>\n        multicall(config, {\n          ...rest,\n          allowFailure,\n          blockNumber,\n          blockTag,\n          chainId: Number.parseInt(chainId),\n          contracts: contracts.map(({ contract }) => contract),\n        }),\n      )\n\n    const multicallResults = (await Promise.all(promises())).flat()\n    // Reorder the contract results back to the order they were\n    // provided in.\n    const resultIndexes = Object.values(contractsByChainId).flatMap(\n      (contracts) => contracts.map(({ index }) => index),\n    )\n    return multicallResults.reduce((results, result, index) => {\n      if (results) (results as unknown[])[resultIndexes[index]!] = result\n      return results\n    }, [] as unknown[]) as ReadContractsReturnType<contracts, allowFailure>\n  } catch (error) {\n    if (error instanceof ContractFunctionExecutionError) throw error\n\n    const promises = () =>\n      contracts.map((contract) =>\n        readContract(config, { ...contract, blockNumber, blockTag }),\n      )\n    if (allowFailure)\n      return (await Promise.allSettled(promises())).map((result) => {\n        if (result.status === 'fulfilled')\n          return { result: result.value, status: 'success' }\n        return { error: result.reason, result: undefined, status: 'failure' }\n      }) as ReadContractsReturnType<contracts, allowFailure>\n\n    return (await Promise.all(promises())) as ReadContractsReturnType<\n      contracts,\n      allowFailure\n    >\n  }\n}\n"],"names":[],"mappings":";;;;;;;;;;AA6BO,eAAe,cAKpB,MAAc,EACd,UAAoE;IAEpE,MAAM,EAAE,eAAe,IAAI,EAAE,WAAW,EAAE,QAAQ,EAAE,GAAG,MAAM,GAAG;IAChE,MAAM,YAAY,WAAW,SAEzB;IAEJ,IAAI;QACF,MAAM,qBAKF,CAAA;QACJ,KAAK,MAAM,CAAC,OAAO,SAAS,IAAI,UAAU,OAAO,GAAI;YACnD,MAAM,UAAU,SAAS,OAAO,IAAI,OAAO,KAAK,CAAC,OAAO;YACxD,IAAI,CAAC,kBAAkB,CAAC,QAAQ,EAAE,kBAAkB,CAAC,QAAQ,GAAG,EAAE;YAClE,kBAAkB,CAAC,QAAQ,EAAE,KAAK;gBAAE;gBAAU;YAAK;QACrD;QACA,MAAM,WAAW,IACf,OAAO,OAAO,CAAC,oBAAoB,GAAG,CAAC,CAAC,CAAC,SAAS,UAAU,GAC1D,CAAA,GAAA,kKAAA,CAAA,YAAS,AAAT,EAAU,QAAQ;oBAChB,GAAG,IAAI;oBACP;oBACA;oBACA;oBACA,SAAS,OAAO,QAAQ,CAAC;oBACzB,WAAW,UAAU,GAAG,CAAC,CAAC,EAAE,QAAQ,EAAE,GAAK;;QAIjD,MAAM,mBAAmB,CAAC,MAAM,QAAQ,GAAG,CAAC,WAAW,EAAE,IAAI;QAC7D,2DAA2D;QAC3D,eAAe;QACf,MAAM,gBAAgB,OAAO,MAAM,CAAC,oBAAoB,OAAO,CAC7D,CAAC,YAAc,UAAU,GAAG,CAAC,CAAC,EAAE,KAAK,EAAE,GAAK;QAE9C,OAAO,iBAAiB,MAAM,CAAC,CAAC,SAAS,QAAQ;YAC/C,IAAI,SAAU,OAAqB,CAAC,aAAa,CAAC,MAAO,CAAC,GAAG;YAC7D,OAAO;QACT,GAAG,EAAe;IACpB,EAAE,OAAO,OAAO;QACd,IAAI,iBAAiB,8IAAA,CAAA,iCAA8B,EAAE,MAAM;QAE3D,MAAM,WAAW,IACf,UAAU,GAAG,CAAC,CAAC,WACb,CAAA,GAAA,qKAAA,CAAA,eAAY,AAAZ,EAAa,QAAQ;oBAAE,GAAG,QAAQ;oBAAE;oBAAa;gBAAQ;QAE7D,IAAI,cACF,OAAO,CAAC,MAAM,QAAQ,UAAU,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC;YACjD,IAAI,OAAO,MAAM,KAAK,aACpB,OAAO;gBAAE,QAAQ,OAAO,KAAK;gBAAE,QAAQ;YAAS;YAClD,OAAO;gBAAE,OAAO,OAAO,MAAM;gBAAE,QAAQ;gBAAW,QAAQ;YAAS;QACrE;QAEF,OAAQ,MAAM,QAAQ,GAAG,CAAC;IAI5B;AACF"}},
    {"offset": {"line": 734, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 739, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@wagmi/core/src/actions/getBalance.ts"],"sourcesContent":["import {\n  type Address,\n  ContractFunctionExecutionError,\n  type Hex,\n  formatUnits,\n  hexToString,\n  trim,\n} from 'viem'\nimport {\n  type GetBalanceErrorType as viem_GetBalanceErrorType,\n  type GetBalanceParameters as viem_GetBalanceParameters,\n  getBalance as viem_getBalance,\n} from 'viem/actions'\n\nimport type { Config } from '../createConfig.js'\nimport type { ChainIdParameter } from '../types/properties.js'\nimport type { Unit } from '../types/unit.js'\nimport type { Compute } from '../types/utils.js'\nimport { getAction } from '../utils/getAction.js'\nimport { getUnit } from '../utils/getUnit.js'\nimport { readContracts } from './readContracts.js'\n\nexport type GetBalanceParameters<config extends Config = Config> = Compute<\n  ChainIdParameter<config> &\n    viem_GetBalanceParameters & {\n      /** @deprecated */\n      token?: Address | undefined\n      /** @deprecated */\n      unit?: Unit | undefined\n    }\n>\n\nexport type GetBalanceReturnType = {\n  decimals: number\n  /** @deprecated */\n  formatted: string\n  symbol: string\n  value: bigint\n}\n\nexport type GetBalanceErrorType = viem_GetBalanceErrorType\n\n/** https://wagmi.sh/core/api/actions/getBalance */\nexport async function getBalance<config extends Config>(\n  config: config,\n  parameters: GetBalanceParameters<config>,\n): Promise<GetBalanceReturnType> {\n  const {\n    address,\n    blockNumber,\n    blockTag,\n    chainId,\n    token: tokenAddress,\n    unit = 'ether',\n  } = parameters\n\n  if (tokenAddress) {\n    try {\n      return getTokenBalance(config, {\n        balanceAddress: address,\n        chainId,\n        symbolType: 'string',\n        tokenAddress,\n      })\n    } catch (error) {\n      // In the chance that there is an error upon decoding the contract result,\n      // it could be likely that the contract data is represented as bytes32 instead\n      // of a string.\n      if (error instanceof ContractFunctionExecutionError) {\n        const balance = await getTokenBalance(config, {\n          balanceAddress: address,\n          chainId,\n          symbolType: 'bytes32',\n          tokenAddress,\n        })\n        const symbol = hexToString(\n          trim(balance.symbol as Hex, { dir: 'right' }),\n        )\n        return { ...balance, symbol }\n      }\n      throw error\n    }\n  }\n\n  const client = config.getClient({ chainId })\n  const action = getAction(client, viem_getBalance, 'getBalance')\n  const value = await action(\n    blockNumber ? { address, blockNumber } : { address, blockTag },\n  )\n  const chain = config.chains.find((x) => x.id === chainId) ?? client.chain!\n  return {\n    decimals: chain.nativeCurrency.decimals,\n    formatted: formatUnits(value, getUnit(unit)),\n    symbol: chain.nativeCurrency.symbol,\n    value,\n  }\n}\n\ntype GetTokenBalanceParameters = {\n  balanceAddress: Address\n  chainId?: number | undefined\n  symbolType: 'bytes32' | 'string'\n  tokenAddress: Address\n  unit?: Unit | undefined\n}\n\nasync function getTokenBalance(\n  config: Config,\n  parameters: GetTokenBalanceParameters,\n) {\n  const { balanceAddress, chainId, symbolType, tokenAddress, unit } = parameters\n  const contract = {\n    abi: [\n      {\n        type: 'function',\n        name: 'balanceOf',\n        stateMutability: 'view',\n        inputs: [{ type: 'address' }],\n        outputs: [{ type: 'uint256' }],\n      },\n      {\n        type: 'function',\n        name: 'decimals',\n        stateMutability: 'view',\n        inputs: [],\n        outputs: [{ type: 'uint8' }],\n      },\n      {\n        type: 'function',\n        name: 'symbol',\n        stateMutability: 'view',\n        inputs: [],\n        outputs: [{ type: symbolType }],\n      },\n    ],\n    address: tokenAddress,\n  } as const\n  const [value, decimals, symbol] = await readContracts(config, {\n    allowFailure: false,\n    contracts: [\n      {\n        ...contract,\n        functionName: 'balanceOf',\n        args: [balanceAddress],\n        chainId,\n      },\n      { ...contract, functionName: 'decimals', chainId },\n      { ...contract, functionName: 'symbol', chainId },\n    ] as const,\n  })\n  const formatted = formatUnits(value ?? '0', getUnit(unit ?? decimals))\n  return { decimals, formatted, symbol, value }\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AA2CO,eAAe,WACpB,MAAc,EACd,UAAwC;IAExC,MAAM,EACJ,OAAO,EACP,WAAW,EACX,QAAQ,EACR,OAAO,EACP,OAAO,YAAY,EACnB,OAAO,OAAO,EACf,GAAG;IAEJ,IAAI,cAAc;QAChB,IAAI;YACF,OAAO,gBAAgB,QAAQ;gBAC7B,gBAAgB;gBAChB;gBACA,YAAY;gBACZ;;QAEJ,EAAE,OAAO,OAAO;YACd,0EAA0E;YAC1E,8EAA8E;YAC9E,eAAe;YACf,IAAI,iBAAiB,8IAAA,CAAA,iCAA8B,EAAE;gBACnD,MAAM,UAAU,MAAM,gBAAgB,QAAQ;oBAC5C,gBAAgB;oBAChB;oBACA,YAAY;oBACZ;;gBAEF,MAAM,SAAS,CAAA,GAAA,wJAAA,CAAA,cAAW,AAAX,EACb,CAAA,GAAA,iJAAA,CAAA,OAAI,AAAJ,EAAK,QAAQ,MAAa,EAAE;oBAAE,KAAK;gBAAO;gBAE5C,OAAO;oBAAE,GAAG,OAAO;oBAAE;gBAAM;YAC7B;YACA,MAAM;QACR;IACF;IAEA,MAAM,SAAS,OAAO,SAAS,CAAC;QAAE;IAAO;IACzC,MAAM,SAAS,CAAA,GAAA,gKAAA,CAAA,YAAS,AAAT,EAAU,QAAQ,2JAAA,CAAA,aAAe,EAAE;IAClD,MAAM,QAAQ,MAAM,OAClB,cAAc;QAAE;QAAS;IAAW,IAAK;QAAE;QAAS;IAAQ;IAE9D,MAAM,QAAQ,OAAO,MAAM,CAAC,IAAI,CAAC,CAAC,IAAM,EAAE,EAAE,KAAK,YAAY,OAAO,KAAM;IAC1E,OAAO;QACL,UAAU,MAAM,cAAc,CAAC,QAAQ;QACvC,WAAW,CAAA,GAAA,wJAAA,CAAA,cAAW,AAAX,EAAY,OAAO,CAAA,GAAA,8JAAA,CAAA,UAAO,AAAP,EAAQ;QACtC,QAAQ,MAAM,cAAc,CAAC,MAAM;QACnC;;AAEJ;AAUA,eAAe,gBACb,MAAc,EACd,UAAqC;IAErC,MAAM,EAAE,cAAc,EAAE,OAAO,EAAE,UAAU,EAAE,YAAY,EAAE,IAAI,EAAE,GAAG;IACpE,MAAM,WAAW;QACf,KAAK;YACH;gBACE,MAAM;gBACN,MAAM;gBACN,iBAAiB;gBACjB,QAAQ;oBAAC;wBAAE,MAAM;oBAAS;iBAAG;gBAC7B,SAAS;oBAAC;wBAAE,MAAM;oBAAS;iBAAG;;YAEhC;gBACE,MAAM;gBACN,MAAM;gBACN,iBAAiB;gBACjB,QAAQ,EAAE;gBACV,SAAS;oBAAC;wBAAE,MAAM;oBAAO;iBAAG;;YAE9B;gBACE,MAAM;gBACN,MAAM;gBACN,iBAAiB;gBACjB,QAAQ,EAAE;gBACV,SAAS;oBAAC;wBAAE,MAAM;oBAAU;iBAAG;;SAElC;QACD,SAAS;;IAEX,MAAM,CAAC,OAAO,UAAU,OAAO,GAAG,MAAM,CAAA,GAAA,sKAAA,CAAA,gBAAa,AAAb,EAAc,QAAQ;QAC5D,cAAc;QACd,WAAW;YACT;gBACE,GAAG,QAAQ;gBACX,cAAc;gBACd,MAAM;oBAAC;iBAAe;gBACtB;;YAEF;gBAAE,GAAG,QAAQ;gBAAE,cAAc;gBAAY;YAAO;YAChD;gBAAE,GAAG,QAAQ;gBAAE,cAAc;gBAAU;YAAO;SACtC;;IAEZ,MAAM,YAAY,CAAA,GAAA,wJAAA,CAAA,cAAW,AAAX,EAAY,SAAS,KAAK,CAAA,GAAA,8JAAA,CAAA,UAAO,AAAP,EAAQ,QAAQ;IAC5D,OAAO;QAAE;QAAU;QAAW;QAAQ;IAAK;AAC7C"}},
    {"offset": {"line": 882, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 887, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@wagmi/core/src/query/getBalance.ts"],"sourcesContent":["import type { QueryOptions } from '@tanstack/query-core'\n\nimport {\n  type GetBalanceErrorType,\n  type GetBalanceParameters,\n  type GetBalanceReturnType,\n  getBalance,\n} from '../actions/getBalance.js'\nimport type { Config } from '../createConfig.js'\nimport type { ScopeKeyParameter } from '../types/properties.js'\nimport type { Compute, PartialBy } from '../types/utils.js'\nimport { filterQueryOptions } from './utils.js'\n\nexport type GetBalanceOptions<config extends Config> = Compute<\n  PartialBy<GetBalanceParameters<config>, 'address'> & ScopeKeyParameter\n>\n\nexport function getBalanceQueryOptions<config extends Config>(\n  config: config,\n  options: GetBalanceOptions<config> = {},\n) {\n  return {\n    async queryFn({ queryKey }) {\n      const { address, scopeKey: _, ...parameters } = queryKey[1]\n      if (!address) throw new Error('address is required')\n      const balance = await getBalance(config, {\n        ...(parameters as GetBalanceParameters),\n        address,\n      })\n      return balance ?? null\n    },\n    queryKey: getBalanceQueryKey(options),\n  } as const satisfies QueryOptions<\n    GetBalanceQueryFnData,\n    GetBalanceErrorType,\n    GetBalanceData,\n    GetBalanceQueryKey<config>\n  >\n}\n\nexport type GetBalanceQueryFnData = Compute<GetBalanceReturnType>\n\nexport type GetBalanceData = GetBalanceQueryFnData\n\nexport function getBalanceQueryKey<config extends Config>(\n  options: GetBalanceOptions<config> = {},\n) {\n  return ['balance', filterQueryOptions(options)] as const\n}\n\nexport type GetBalanceQueryKey<config extends Config> = ReturnType<\n  typeof getBalanceQueryKey<config>\n>\n"],"names":[],"mappings":";;;;;;;;;AAiBM,SAAU,uBACd,MAAc,EACd,UAAqC,CAAA,CAAE;IAEvC,OAAO;QACL,MAAM,SAAQ,EAAE,QAAQ,EAAE;YACxB,MAAM,EAAE,OAAO,EAAE,UAAU,CAAC,EAAE,GAAG,YAAY,GAAG,QAAQ,CAAC,EAAE;YAC3D,IAAI,CAAC,SAAS,MAAM,IAAI,MAAM;YAC9B,MAAM,UAAU,MAAM,CAAA,GAAA,mKAAA,CAAA,aAAU,AAAV,EAAW,QAAQ;gBACvC,GAAI,UAAmC;gBACvC;;YAEF,OAAO,WAAW;QACpB;QACA,UAAU,mBAAmB;;AAOjC;AAMM,SAAU,mBACd,UAAqC,CAAA,CAAE;IAEvC,OAAO;QAAC;QAAW,CAAA,GAAA,4JAAA,CAAA,qBAAkB,AAAlB,EAAmB;KAAkB;AAC1D"}},
    {"offset": {"line": 916, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 921, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@wagmi/core/src/actions/getClient.ts"],"sourcesContent":["import type { Client } from 'viem'\n\nimport type { Config } from '../createConfig.js'\nimport type { ChainIdParameter } from '../types/properties.js'\nimport type { Compute, IsNarrowable } from '../types/utils.js'\n\nexport type GetClientParameters<\n  config extends Config = Config,\n  chainId extends\n    | config['chains'][number]['id']\n    | number\n    | undefined = config['chains'][number]['id'],\n> = ChainIdParameter<config, chainId>\n\nexport type GetClientReturnType<\n  config extends Config = Config,\n  chainId extends\n    | config['chains'][number]['id']\n    | undefined = config['chains'][number]['id'],\n  ///\n  resolvedChainId extends\n    | config['chains'][number]['id']\n    | undefined = IsNarrowable<\n    config['chains'][number]['id'],\n    number\n  > extends true\n    ? IsNarrowable<chainId, number> extends true\n      ? chainId\n      : config['chains'][number]['id']\n    : config['chains'][number]['id'] | undefined,\n> = resolvedChainId extends config['chains'][number]['id']\n  ? Compute<\n      Client<\n        config['_internal']['transports'][resolvedChainId],\n        Extract<config['chains'][number], { id: resolvedChainId }>\n      >\n    >\n  : undefined\n\nexport function getClient<\n  config extends Config,\n  chainId extends config['chains'][number]['id'] | number | undefined,\n>(\n  config: config,\n  parameters: GetClientParameters<config, chainId> = {},\n): GetClientReturnType<config, chainId> {\n  let client = undefined\n  try {\n    client = config.getClient(parameters)\n  } catch {}\n  return client as GetClientReturnType<config, chainId>\n}\n"],"names":[],"mappings":";;;AAuCM,SAAU,UAId,MAAc,EACd,aAAmD,CAAA,CAAE;IAErD,IAAI,SAAS;IACb,IAAI;QACF,SAAS,OAAO,SAAS,CAAC;IAC5B,EAAE,OAAM,CAAC;IACT,OAAO;AACT"}},
    {"offset": {"line": 931, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 936, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@wagmi/core/src/actions/getPublicClient.ts"],"sourcesContent":["import { type Client, type PublicClient, publicActions } from 'viem'\n\nimport type { Config } from '../createConfig.js'\nimport type { ChainIdParameter } from '../types/properties.js'\nimport type { Compute, IsNarrowable } from '../types/utils.js'\nimport { getClient } from './getClient.js'\n\nexport type GetPublicClientParameters<\n  config extends Config = Config,\n  chainId extends\n    | config['chains'][number]['id']\n    | undefined = config['chains'][number]['id'],\n> = ChainIdParameter<config, chainId>\n\nexport type GetPublicClientReturnType<\n  config extends Config = Config,\n  chainId extends\n    | config['chains'][number]['id']\n    | undefined = config['chains'][number]['id'],\n  ///\n  resolvedChainId extends\n    | config['chains'][number]['id']\n    | undefined = IsNarrowable<\n    config['chains'][number]['id'],\n    number\n  > extends true\n    ? IsNarrowable<chainId, number> extends true\n      ? chainId\n      : config['chains'][number]['id']\n    : config['chains'][number]['id'] | undefined,\n> = resolvedChainId extends config['chains'][number]['id']\n  ? Compute<\n      PublicClient<\n        config['_internal']['transports'][resolvedChainId],\n        Extract<config['chains'][number], { id: resolvedChainId }>\n      >\n    >\n  : undefined\n\nexport function getPublicClient<\n  config extends Config,\n  chainId extends config['chains'][number]['id'] | number | undefined,\n>(\n  config: config,\n  parameters: GetPublicClientParameters<config, chainId> = {},\n): GetPublicClientReturnType<config, chainId> {\n  const client = getClient(config, parameters)\n  return (client as Client)?.extend(publicActions) as GetPublicClientReturnType<\n    config,\n    chainId\n  >\n}\n"],"names":[],"mappings":";;;;;;;;AAuCM,SAAU,gBAId,MAAc,EACd,aAAyD,CAAA,CAAE;IAE3D,MAAM,SAAS,CAAA,GAAA,kKAAA,CAAA,YAAS,AAAT,EAAU,QAAQ;IACjC,OAAQ,QAAmB,OAAO,2JAAA,CAAA,gBAAa;AAIjD"}},
    {"offset": {"line": 948, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 953, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@wagmi/core/src/actions/watchPublicClient.ts"],"sourcesContent":["import type { Config } from '../createConfig.js'\nimport {\n  type GetPublicClientReturnType,\n  getPublicClient,\n} from './getPublicClient.js'\n\nexport type WatchPublicClientParameters<\n  config extends Config = Config,\n  chainId extends\n    config['chains'][number]['id'] = config['chains'][number]['id'],\n> = {\n  onChange(\n    publicClient: GetPublicClientReturnType<config, chainId>,\n    prevPublicClient: GetPublicClientReturnType<config, chainId>,\n  ): void\n}\n\nexport type WatchPublicClientReturnType = () => void\n\n/** https://wagmi.sh/core/api/actions/watchPublicClient */\nexport function watchPublicClient<\n  config extends Config,\n  chainId extends config['chains'][number]['id'],\n>(\n  config: config,\n  parameters: WatchPublicClientParameters<config, chainId>,\n): WatchPublicClientReturnType {\n  const { onChange } = parameters\n  return config.subscribe(\n    () => getPublicClient(config) as GetPublicClientReturnType<config, chainId>,\n    onChange,\n    {\n      equalityFn(a, b) {\n        return a?.uid === b?.uid\n      },\n    },\n  )\n}\n"],"names":[],"mappings":";;;;;;AAoBM,SAAU,kBAId,MAAc,EACd,UAAwD;IAExD,MAAM,EAAE,QAAQ,EAAE,GAAG;IACrB,OAAO,OAAO,SAAS,CACrB,IAAM,CAAA,GAAA,wKAAA,CAAA,kBAAe,AAAf,EAAgB,SACtB,UACA;QACE,YAAW,CAAC,EAAE,CAAC;YACb,OAAO,GAAG,QAAQ,GAAG;QACvB;;AAGN"}},
    {"offset": {"line": 967, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 972, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@wagmi/core/src/errors/config.ts"],"sourcesContent":["import type { Address } from 'viem'\n\nimport type { Connector } from '../createConfig.js'\nimport { BaseError } from './base.js'\n\nexport type ChainNotConfiguredErrorType = ChainNotConfiguredError & {\n  name: 'ChainNotConfiguredError'\n}\nexport class ChainNotConfiguredError extends BaseError {\n  override name = 'ChainNotConfiguredError'\n  constructor() {\n    super('Chain not configured.')\n  }\n}\n\nexport type ConnectorAlreadyConnectedErrorType =\n  ConnectorAlreadyConnectedError & {\n    name: 'ConnectorAlreadyConnectedError'\n  }\nexport class ConnectorAlreadyConnectedError extends BaseError {\n  override name = 'ConnectorAlreadyConnectedError'\n  constructor() {\n    super('Connector already connected.')\n  }\n}\n\nexport type ConnectorNotConnectedErrorType = ConnectorNotConnectedError & {\n  name: 'ConnectorNotConnectedError'\n}\nexport class ConnectorNotConnectedError extends BaseError {\n  override name = 'ConnectorNotConnectedError'\n  constructor() {\n    super('Connector not connected.')\n  }\n}\n\nexport type ConnectorNotFoundErrorType = ConnectorNotFoundError & {\n  name: 'ConnectorNotFoundError'\n}\nexport class ConnectorNotFoundError extends BaseError {\n  override name = 'ConnectorNotFoundError'\n  constructor() {\n    super('Connector not found.')\n  }\n}\n\nexport type ConnectorAccountNotFoundErrorType =\n  ConnectorAccountNotFoundError & {\n    name: 'ConnectorAccountNotFoundError'\n  }\nexport class ConnectorAccountNotFoundError extends BaseError {\n  override name = 'ConnectorAccountNotFoundError'\n  constructor({\n    address,\n    connector,\n  }: {\n    address: Address\n    connector: Connector\n  }) {\n    super(`Account \"${address}\" not found for connector \"${connector.name}\".`)\n  }\n}\n\nexport type ConnectorChainMismatchErrorType = ConnectorAccountNotFoundError & {\n  name: 'ConnectorChainMismatchError'\n}\nexport class ConnectorChainMismatchError extends BaseError {\n  override name = 'ConnectorChainMismatchError'\n  constructor({\n    connectionChainId,\n    connectorChainId,\n  }: {\n    connectionChainId: number\n    connectorChainId: number\n  }) {\n    super(\n      `The current chain of the connector (id: ${connectorChainId}) does not match the connection's chain (id: ${connectionChainId}).`,\n      {\n        metaMessages: [\n          `Current Chain ID:  ${connectorChainId}`,\n          `Expected Chain ID: ${connectionChainId}`,\n        ],\n      },\n    )\n  }\n}\n\nexport type ConnectorUnavailableReconnectingErrorType =\n  ConnectorUnavailableReconnectingError & {\n    name: 'ConnectorUnavailableReconnectingError'\n  }\nexport class ConnectorUnavailableReconnectingError extends BaseError {\n  override name = 'ConnectorUnavailableReconnectingError'\n  constructor({ connector }: { connector: { name: string } }) {\n    super(`Connector \"${connector.name}\" unavailable while reconnecting.`, {\n      details: [\n        'During the reconnection step, the only connector methods guaranteed to be available are: `id`, `name`, `type`, `uuid`.',\n        'All other methods are not guaranteed to be available until reconnection completes and connectors are fully restored.',\n        'This error commonly occurs for connectors that asynchronously inject after reconnection has already started.',\n      ].join(' '),\n    })\n  }\n}\n"],"names":[],"mappings":";;;;;;;;;;;;AAQM,MAAO,gCAAgC,4JAAA,CAAA,YAAS;IAEpD,aAAA;QACE,KAAK,CAAC;QAFC,OAAA,cAAA,CAAA,IAAA,EAAA,QAAA;;;;mBAAO;;IAGhB;;AAOI,MAAO,uCAAuC,4JAAA,CAAA,YAAS;IAE3D,aAAA;QACE,KAAK,CAAC;QAFC,OAAA,cAAA,CAAA,IAAA,EAAA,QAAA;;;;mBAAO;;IAGhB;;AAMI,MAAO,mCAAmC,4JAAA,CAAA,YAAS;IAEvD,aAAA;QACE,KAAK,CAAC;QAFC,OAAA,cAAA,CAAA,IAAA,EAAA,QAAA;;;;mBAAO;;IAGhB;;AAMI,MAAO,+BAA+B,4JAAA,CAAA,YAAS;IAEnD,aAAA;QACE,KAAK,CAAC;QAFC,OAAA,cAAA,CAAA,IAAA,EAAA,QAAA;;;;mBAAO;;IAGhB;;AAOI,MAAO,sCAAsC,4JAAA,CAAA,YAAS;IAE1D,YAAY,EACV,OAAO,EACP,SAAS,EAIV,CAAA;QACC,KAAK,CAAC,CAAA,SAAA,EAAY,QAAO,2BAAA,EAA8B,UAAU,IAAI,CAAA,EAAA,CAAI;QARlE,OAAA,cAAA,CAAA,IAAA,EAAA,QAAA;;;;mBAAO;;IAShB;;AAMI,MAAO,oCAAoC,4JAAA,CAAA,YAAS;IAExD,YAAY,EACV,iBAAiB,EACjB,gBAAgB,EAIjB,CAAA;QACC,KAAK,CACH,CAAA,wCAAA,EAA2C,iBAAgB,6CAAA,EAAgD,kBAAiB,EAAA,CAAI,EAChI;YACE,cAAc;gBACZ,CAAA,mBAAA,EAAsB,iBAAgB,CAAE;gBACxC,CAAA,mBAAA,EAAsB,kBAAiB,CAAE;aAC1C;;QAdE,OAAA,cAAA,CAAA,IAAA,EAAA,QAAA;;;;mBAAO;;IAiBhB;;AAOI,MAAO,8CAA8C,4JAAA,CAAA,YAAS;IAElE,YAAY,EAAE,SAAS,EAAmC,CAAA;QACxD,KAAK,CAAC,CAAA,WAAA,EAAc,UAAU,IAAI,CAAA,iCAAA,CAAmC,EAAE;YACrE,SAAS;gBACP;gBACA;gBACA;aACD,CAAC,IAAI,CAAC;;QAPF,OAAA,cAAA,CAAA,IAAA,EAAA,QAAA;;;;mBAAO;;IAShB"}},
    {"offset": {"line": 1072, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1077, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@wagmi/core/src/actions/connect.ts"],"sourcesContent":["import type {\n  Address,\n  ResourceUnavailableRpcErrorType,\n  UserRejectedRequestErrorType,\n} from 'viem'\n\nimport type { CreateConnectorFn } from '../connectors/createConnector.js'\nimport type { Config, Connector } from '../createConfig.js'\nimport type { BaseErrorType, ErrorType } from '../errors/base.js'\nimport {\n  ConnectorAlreadyConnectedError,\n  type ConnectorAlreadyConnectedErrorType,\n} from '../errors/config.js'\nimport type { ChainIdParameter } from '../types/properties.js'\nimport type { Compute } from '../types/utils.js'\n\nexport type ConnectParameters<config extends Config = Config> = Compute<\n  ChainIdParameter<config> & {\n    connector: Connector | CreateConnectorFn\n  }\n>\n\nexport type ConnectReturnType<config extends Config = Config> = {\n  accounts: readonly [Address, ...Address[]]\n  chainId:\n    | config['chains'][number]['id']\n    | (number extends config['chains'][number]['id'] ? number : number & {})\n}\n\nexport type ConnectErrorType =\n  | ConnectorAlreadyConnectedErrorType\n  // connector.connect()\n  | UserRejectedRequestErrorType\n  | ResourceUnavailableRpcErrorType\n  // base\n  | BaseErrorType\n  | ErrorType\n\n/** https://wagmi.sh/core/api/actions/connect */\nexport async function connect<config extends Config>(\n  config: config,\n  parameters: ConnectParameters<config>,\n): Promise<ConnectReturnType<config>> {\n  // \"Register\" connector if not already created\n  let connector: Connector\n  if (typeof parameters.connector === 'function') {\n    connector = config._internal.connectors.setup(parameters.connector)\n  } else connector = parameters.connector\n\n  // Check if connector is already connected\n  if (connector.uid === config.state.current)\n    throw new ConnectorAlreadyConnectedError()\n\n  try {\n    config.setState((x) => ({ ...x, status: 'connecting' }))\n    connector.emitter.emit('message', { type: 'connecting' })\n\n    const data = await connector.connect({ chainId: parameters.chainId })\n    const accounts = data.accounts as readonly [Address, ...Address[]]\n\n    connector.emitter.off('connect', config._internal.events.connect)\n    connector.emitter.on('change', config._internal.events.change)\n    connector.emitter.on('disconnect', config._internal.events.disconnect)\n\n    await config.storage?.setItem('recentConnectorId', connector.id)\n    config.setState((x) => ({\n      ...x,\n      connections: new Map(x.connections).set(connector.uid, {\n        accounts,\n        chainId: data.chainId,\n        connector: connector,\n      }),\n      current: connector.uid,\n      status: 'connected',\n    }))\n\n    return { accounts, chainId: data.chainId }\n  } catch (error) {\n    config.setState((x) => ({\n      ...x,\n      // Keep existing connector connected in case of error\n      status: x.current ? 'connected' : 'disconnected',\n    }))\n    throw error\n  }\n}\n"],"names":[],"mappings":";;;;;;AAuCO,eAAe,QACpB,MAAc,EACd,UAAqC;IAErC,8CAA8C;IAC9C,IAAI;IACJ,IAAI,OAAO,WAAW,SAAS,KAAK,YAAY;QAC9C,YAAY,OAAO,SAAS,CAAC,UAAU,CAAC,KAAK,CAAC,WAAW,SAAS;IACpE,OAAO,YAAY,WAAW,SAAS;IAEvC,0CAA0C;IAC1C,IAAI,UAAU,GAAG,KAAK,OAAO,KAAK,CAAC,OAAO,EACxC,MAAM,IAAI,8JAAA,CAAA,iCAA8B;IAE1C,IAAI;QACF,OAAO,QAAQ,CAAC,CAAC,IAAM,CAAC;gBAAE,GAAG,CAAC;gBAAE,QAAQ;YAAY,CAAE;QACtD,UAAU,OAAO,CAAC,IAAI,CAAC,WAAW;YAAE,MAAM;QAAY;QAEtD,MAAM,OAAO,MAAM,UAAU,OAAO,CAAC;YAAE,SAAS,WAAW,OAAO;QAAA;QAClE,MAAM,WAAW,KAAK,QAA4C;QAElE,UAAU,OAAO,CAAC,GAAG,CAAC,WAAW,OAAO,SAAS,CAAC,MAAM,CAAC,OAAO;QAChE,UAAU,OAAO,CAAC,EAAE,CAAC,UAAU,OAAO,SAAS,CAAC,MAAM,CAAC,MAAM;QAC7D,UAAU,OAAO,CAAC,EAAE,CAAC,cAAc,OAAO,SAAS,CAAC,MAAM,CAAC,UAAU;QAErE,MAAM,OAAO,OAAO,EAAE,QAAQ,qBAAqB,UAAU,EAAE;QAC/D,OAAO,QAAQ,CAAC,CAAC,IAAM,CAAC;gBACtB,GAAG,CAAC;gBACJ,aAAa,IAAI,IAAI,EAAE,WAAW,EAAE,GAAG,CAAC,UAAU,GAAG,EAAE;oBACrD;oBACA,SAAS,KAAK,OAAO;oBACrB,WAAW;;gBAEb,SAAS,UAAU,GAAG;gBACtB,QAAQ;aACT;QAED,OAAO;YAAE;YAAU,SAAS,KAAK,OAAO;QAAA;IAC1C,EAAE,OAAO,OAAO;QACd,OAAO,QAAQ,CAAC,CAAC,IAAM,CAAC;gBACtB,GAAG,CAAC;gBACJ,qDAAqD;gBACrD,QAAQ,EAAE,OAAO,GAAG,cAAc;aACnC;QACD,MAAM;IACR;AACF"}},
    {"offset": {"line": 1130, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1135, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@wagmi/core/src/query/connect.ts"],"sourcesContent":["import type { MutationOptions } from '@tanstack/query-core'\n\nimport {\n  type ConnectErrorType,\n  type ConnectParameters,\n  type ConnectReturnType,\n  connect,\n} from '../actions/connect.js'\nimport type { Config } from '../createConfig.js'\n\nimport type { Mutate, MutateAsync } from './types.js'\n\nexport function connectMutationOptions<config extends Config>(config: config) {\n  return {\n    mutationFn(variables) {\n      return connect(config, variables)\n    },\n    mutationKey: ['connect'],\n  } as const satisfies MutationOptions<\n    ConnectData<config>,\n    ConnectErrorType,\n    ConnectVariables<config>\n  >\n}\n\nexport type ConnectData<config extends Config> = ConnectReturnType<config>\n\nexport type ConnectVariables<config extends Config> = ConnectParameters<config>\n\nexport type ConnectMutate<config extends Config, context = unknown> = Mutate<\n  ConnectData<config>,\n  ConnectErrorType,\n  ConnectVariables<config>,\n  context\n>\n\nexport type ConnectMutateAsync<\n  config extends Config,\n  context = unknown,\n> = MutateAsync<\n  ConnectData<config>,\n  ConnectErrorType,\n  ConnectVariables<config>,\n  context\n>\n"],"names":[],"mappings":";;;;;;AAYM,SAAU,uBAA8C,MAAc;IAC1E,OAAO;QACL,YAAW,SAAS;YAClB,OAAO,CAAA,GAAA,gKAAA,CAAA,UAAO,AAAP,EAAQ,QAAQ;QACzB;QACA,aAAa;YAAC;SAAU;;AAM5B"}},
    {"offset": {"line": 1151, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1156, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@wagmi/core/src/actions/getConnectors.ts"],"sourcesContent":["import type { Config, Connector } from '../createConfig.js'\nimport { deepEqual } from '../utils/deepEqual.js'\n\nexport type GetConnectorsReturnType = readonly Connector[]\n\nlet previousConnectors: readonly Connector[] = []\n\n/** https://wagmi.sh/core/api/actions/getConnectors */\nexport function getConnectors(config: Config): GetConnectorsReturnType {\n  const connectors = config.connectors\n  if (deepEqual(previousConnectors, connectors)) return previousConnectors\n  previousConnectors = connectors\n  return connectors\n}\n"],"names":[],"mappings":";;;;;;AAKA,IAAI,qBAA2C,EAAE;AAG3C,SAAU,cAAc,MAAc;IAC1C,MAAM,aAAa,OAAO,UAAU;IACpC,IAAI,CAAA,GAAA,gKAAA,CAAA,YAAS,AAAT,EAAU,oBAAoB,aAAa,OAAO;IACtD,qBAAqB;IACrB,OAAO;AACT"}},
    {"offset": {"line": 1169, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1174, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@wagmi/core/src/actions/watchConnectors.ts"],"sourcesContent":["import type { Config } from '../createConfig.js'\nimport type { GetConnectorsReturnType } from './getConnectors.js'\n\nexport type WatchConnectorsParameters = {\n  onChange(\n    connections: GetConnectorsReturnType,\n    prevConnectors: GetConnectorsReturnType,\n  ): void\n}\n\nexport type WatchConnectorsReturnType = () => void\n\n/** https://wagmi.sh/core/api/actions/watchConnectors */\nexport function watchConnectors(\n  config: Config,\n  parameters: WatchConnectorsParameters,\n): WatchConnectorsReturnType {\n  const { onChange } = parameters\n  return config._internal.connectors.subscribe((connectors, prevConnectors) => {\n    onChange(Object.values(connectors), prevConnectors)\n  })\n}\n"],"names":[],"mappings":"AAYA,sDAAA;;;AACM,SAAU,gBACd,MAAc,EACd,UAAqC;IAErC,MAAM,EAAE,QAAQ,EAAE,GAAG;IACrB,OAAO,OAAO,SAAS,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC,YAAY;QACxD,SAAS,OAAO,MAAM,CAAC,aAAa;IACtC;AACF"}},
    {"offset": {"line": 1183, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1188, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@wagmi/core/src/actions/getConnectorClient.ts"],"sourcesContent":["import {\n  type Account,\n  type Address,\n  type BaseErrorType,\n  type Client,\n  createClient,\n  custom,\n} from 'viem'\nimport { getAddress, parseAccount } from 'viem/utils'\n\nimport type { Config, Connection } from '../createConfig.js'\nimport type { ErrorType } from '../errors/base.js'\nimport {\n  ConnectorAccountNotFoundError,\n  type ConnectorAccountNotFoundErrorType,\n  ConnectorChainMismatchError,\n  type ConnectorChainMismatchErrorType,\n  ConnectorNotConnectedError,\n  type ConnectorNotConnectedErrorType,\n  ConnectorUnavailableReconnectingError,\n  type ConnectorUnavailableReconnectingErrorType,\n} from '../errors/config.js'\nimport type {\n  ChainIdParameter,\n  ConnectorParameter,\n} from '../types/properties.js'\nimport type { Compute } from '../types/utils.js'\n\nexport type GetConnectorClientParameters<\n  config extends Config = Config,\n  chainId extends\n    config['chains'][number]['id'] = config['chains'][number]['id'],\n> = Compute<\n  ChainIdParameter<config, chainId> &\n    ConnectorParameter & {\n      account?: Address | Account | undefined\n    }\n>\n\nexport type GetConnectorClientReturnType<\n  config extends Config = Config,\n  chainId extends\n    config['chains'][number]['id'] = config['chains'][number]['id'],\n> = Compute<\n  Client<\n    config['_internal']['transports'][chainId],\n    Extract<config['chains'][number], { id: chainId }>,\n    Account\n  >\n>\n\nexport type GetConnectorClientErrorType =\n  | ConnectorAccountNotFoundErrorType\n  | ConnectorChainMismatchErrorType\n  | ConnectorNotConnectedErrorType\n  | ConnectorUnavailableReconnectingErrorType\n  // base\n  | BaseErrorType\n  | ErrorType\n\n/** https://wagmi.sh/core/api/actions/getConnectorClient */\nexport async function getConnectorClient<\n  config extends Config,\n  chainId extends config['chains'][number]['id'],\n>(\n  config: config,\n  parameters: GetConnectorClientParameters<config, chainId> = {},\n): Promise<GetConnectorClientReturnType<config, chainId>> {\n  // Get connection\n  let connection: Connection | undefined\n  if (parameters.connector) {\n    const { connector } = parameters\n    if (\n      config.state.status === 'reconnecting' &&\n      !connector.getAccounts &&\n      !connector.getChainId\n    )\n      throw new ConnectorUnavailableReconnectingError({ connector })\n\n    const [accounts, chainId] = await Promise.all([\n      connector.getAccounts(),\n      connector.getChainId(),\n    ])\n    connection = {\n      accounts: accounts as readonly [Address, ...Address[]],\n      chainId,\n      connector,\n    }\n  } else connection = config.state.connections.get(config.state.current!)\n  if (!connection) throw new ConnectorNotConnectedError()\n\n  const chainId = parameters.chainId ?? connection.chainId\n\n  // Check connector using same chainId as connection\n  const connectorChainId = await connection.connector.getChainId()\n  if (connectorChainId !== connection.chainId)\n    throw new ConnectorChainMismatchError({\n      connectionChainId: connection.chainId,\n      connectorChainId,\n    })\n\n  // If connector has custom `getClient` implementation\n  type Return = GetConnectorClientReturnType<config, chainId>\n  const connector = connection.connector\n  if (connector.getClient)\n    return connector.getClient({ chainId }) as unknown as Return\n\n  // Default using `custom` transport\n  const account = parseAccount(parameters.account ?? connection.accounts[0]!)\n  account.address = getAddress(account.address) // TODO: Checksum address as part of `parseAccount`?\n\n  // If account was provided, check that it exists on the connector\n  if (\n    parameters.account &&\n    !connection.accounts.some(\n      (x) => x.toLowerCase() === account.address.toLowerCase(),\n    )\n  )\n    throw new ConnectorAccountNotFoundError({\n      address: account.address,\n      connector,\n    })\n\n  const chain = config.chains.find((chain) => chain.id === chainId)\n  const provider = (await connection.connector.getProvider({ chainId })) as {\n    request(...args: any): Promise<any>\n  }\n\n  return createClient({\n    account,\n    chain,\n    name: 'Connector Client',\n    transport: (opts) => custom(provider)({ ...opts, retryCount: 0 }),\n  }) as Return\n}\n"],"names":[],"mappings":";;;;;;;;;;;;AA6DO,eAAe,mBAIpB,MAAc,EACd,aAA4D,CAAA,CAAE;IAE9D,iBAAiB;IACjB,IAAI;IACJ,IAAI,WAAW,SAAS,EAAE;QACxB,MAAM,EAAE,SAAS,EAAE,GAAG;QACtB,IACE,OAAO,KAAK,CAAC,MAAM,KAAK,kBACxB,CAAC,UAAU,WAAW,IACtB,CAAC,UAAU,UAAU,EAErB,MAAM,IAAI,8JAAA,CAAA,wCAAqC,CAAC;YAAE;QAAS;QAE7D,MAAM,CAAC,UAAU,QAAQ,GAAG,MAAM,QAAQ,GAAG,CAAC;YAC5C,UAAU,WAAW;YACrB,UAAU,UAAU;SACrB;QACD,aAAa;YACX,UAAU;YACV;YACA;;IAEJ,OAAO,aAAa,OAAO,KAAK,CAAC,WAAW,CAAC,GAAG,CAAC,OAAO,KAAK,CAAC,OAAQ;IACtE,IAAI,CAAC,YAAY,MAAM,IAAI,8JAAA,CAAA,6BAA0B;IAErD,MAAM,UAAU,WAAW,OAAO,IAAI,WAAW,OAAO;IAExD,mDAAmD;IACnD,MAAM,mBAAmB,MAAM,WAAW,SAAS,CAAC,UAAU;IAC9D,IAAI,qBAAqB,WAAW,OAAO,EACzC,MAAM,IAAI,8JAAA,CAAA,8BAA2B,CAAC;QACpC,mBAAmB,WAAW,OAAO;QACrC;;IAKJ,MAAM,YAAY,WAAW,SAAS;IACtC,IAAI,UAAU,SAAS,EACrB,OAAO,UAAU,SAAS,CAAC;QAAE;IAAO;IAEtC,mCAAmC;IACnC,MAAM,UAAU,CAAA,GAAA,6JAAA,CAAA,eAAY,AAAZ,EAAa,WAAW,OAAO,IAAI,WAAW,QAAQ,CAAC,EAAG;IAC1E,QAAQ,OAAO,GAAG,CAAA,GAAA,0JAAA,CAAA,aAAU,AAAV,EAAW,QAAQ,OAAO,GAAE,oDAAoD;IAElG,iEAAiE;IACjE,IACE,WAAW,OAAO,IAClB,CAAC,WAAW,QAAQ,CAAC,IAAI,CACvB,CAAC,IAAM,EAAE,WAAW,OAAO,QAAQ,OAAO,CAAC,WAAW,KAGxD,MAAM,IAAI,8JAAA,CAAA,gCAA6B,CAAC;QACtC,SAAS,QAAQ,OAAO;QACxB;;IAGJ,MAAM,QAAQ,OAAO,MAAM,CAAC,IAAI,CAAC,CAAC,QAAU,MAAM,EAAE,KAAK;IACzD,MAAM,WAAY,MAAM,WAAW,SAAS,CAAC,WAAW,CAAC;QAAE;IAAO;IAIlE,OAAO,CAAA,GAAA,mJAAA,CAAA,eAAY,AAAZ,EAAa;QAClB;QACA;QACA,MAAM;QACN,WAAW,CAAC,OAAS,CAAA,GAAA,2JAAA,CAAA,SAAM,AAAN,EAAO,UAAU;gBAAE,GAAG,IAAI;gBAAE,YAAY;YAAC;;AAElE"}},
    {"offset": {"line": 1252, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1257, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@wagmi/core/src/actions/signMessage.ts"],"sourcesContent":["import type { Account, Client } from 'viem'\nimport {\n  type SignMessageErrorType as viem_SignMessageErrorType,\n  type SignMessageParameters as viem_SignMessageParameters,\n  type SignMessageReturnType as viem_SignMessageReturnType,\n  signMessage as viem_signMessage,\n} from 'viem/actions'\n\nimport type { Config } from '../createConfig.js'\nimport type { BaseErrorType, ErrorType } from '../errors/base.js'\nimport type { ConnectorParameter } from '../types/properties.js'\nimport type { Compute } from '../types/utils.js'\nimport { getAction } from '../utils/getAction.js'\nimport {\n  type GetConnectorClientErrorType,\n  getConnectorClient,\n} from './getConnectorClient.js'\n\nexport type SignMessageParameters = Compute<\n  viem_SignMessageParameters<Account> & ConnectorParameter\n>\n\nexport type SignMessageReturnType = viem_SignMessageReturnType\n\nexport type SignMessageErrorType =\n  // getConnectorClient()\n  | GetConnectorClientErrorType\n  // base\n  | BaseErrorType\n  | ErrorType\n  // viem\n  | viem_SignMessageErrorType\n\n/** https://wagmi.sh/core/api/actions/signMessage */\nexport async function signMessage(\n  config: Config,\n  parameters: SignMessageParameters,\n): Promise<SignMessageReturnType> {\n  const { account, connector, ...rest } = parameters\n\n  let client: Client\n  if (typeof account === 'object' && account.type === 'local')\n    client = config.getClient()\n  else client = await getConnectorClient(config, { account, connector })\n\n  const action = getAction(client, viem_signMessage, 'signMessage')\n  return action({\n    ...rest,\n    ...(account ? { account } : {}),\n  } as viem_SignMessageParameters<Account>)\n}\n"],"names":[],"mappings":";;;;;;;;;;AAkCO,eAAe,YACpB,MAAc,EACd,UAAiC;IAEjC,MAAM,EAAE,OAAO,EAAE,SAAS,EAAE,GAAG,MAAM,GAAG;IAExC,IAAI;IACJ,IAAI,OAAO,YAAY,YAAY,QAAQ,IAAI,KAAK,SAClD,SAAS,OAAO,SAAS;SACtB,SAAS,MAAM,CAAA,GAAA,2KAAA,CAAA,qBAAkB,AAAlB,EAAmB,QAAQ;QAAE;QAAS;IAAS;IAEnE,MAAM,SAAS,CAAA,GAAA,gKAAA,CAAA,YAAS,AAAT,EAAU,QAAQ,4JAAA,CAAA,cAAgB,EAAE;IACnD,OAAO,OAAO;QACZ,GAAG,IAAI;QACP,GAAI,UAAU;YAAE;QAAO,IAAK,CAAA,CAAE;;AAElC"}},
    {"offset": {"line": 1283, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1288, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@wagmi/core/src/query/signMessage.ts"],"sourcesContent":["import type { MutationOptions } from '@tanstack/query-core'\n\nimport {\n  type SignMessageErrorType,\n  type SignMessageParameters,\n  type SignMessageReturnType,\n  signMessage,\n} from '../actions/signMessage.js'\nimport type { Config } from '../createConfig.js'\nimport type { Compute } from '../types/utils.js'\nimport type { Mutate, MutateAsync } from './types.js'\n\nexport function signMessageMutationOptions(config: Config) {\n  return {\n    mutationFn(variables) {\n      return signMessage(config, variables)\n    },\n    mutationKey: ['signMessage'],\n  } as const satisfies MutationOptions<\n    SignMessageData,\n    SignMessageErrorType,\n    SignMessageVariables\n  >\n}\n\nexport type SignMessageData = SignMessageReturnType\n\nexport type SignMessageVariables = Compute<SignMessageParameters>\n\nexport type SignMessageMutate<context = unknown> = Mutate<\n  SignMessageData,\n  SignMessageErrorType,\n  SignMessageVariables,\n  context\n>\n\nexport type SignMessageMutateAsync<context = unknown> = MutateAsync<\n  SignMessageData,\n  SignMessageErrorType,\n  SignMessageVariables,\n  context\n>\n"],"names":[],"mappings":";;;;;;AAYM,SAAU,2BAA2B,MAAc;IACvD,OAAO;QACL,YAAW,SAAS;YAClB,OAAO,CAAA,GAAA,oKAAA,CAAA,cAAW,AAAX,EAAY,QAAQ;QAC7B;QACA,aAAa;YAAC;SAAc;;AAMhC"}},
    {"offset": {"line": 1304, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1309, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@wagmi/core/src/actions/disconnect.ts"],"sourcesContent":["import type { Config, Connection, Connector } from '../createConfig.js'\nimport type { BaseErrorType, ErrorType } from '../errors/base.js'\nimport type {\n  ConnectorNotConnectedErrorType,\n  ConnectorNotFoundErrorType,\n} from '../errors/config.js'\nimport type { ConnectorParameter } from '../types/properties.js'\n\nexport type DisconnectParameters = ConnectorParameter\n\nexport type DisconnectReturnType = void\n\nexport type DisconnectErrorType =\n  | ConnectorNotFoundErrorType\n  | ConnectorNotConnectedErrorType\n  // base\n  | BaseErrorType\n  | ErrorType\n\n/** https://wagmi.sh/core/api/actions/disconnect */\nexport async function disconnect(\n  config: Config,\n  parameters: DisconnectParameters = {},\n): Promise<DisconnectReturnType> {\n  let connector: Connector | undefined\n  if (parameters.connector) connector = parameters.connector\n  else {\n    const { connections, current } = config.state\n    const connection = connections.get(current!)\n    connector = connection?.connector\n  }\n\n  const connections = config.state.connections\n\n  if (connector) {\n    await connector.disconnect()\n    connector.emitter.off('change', config._internal.events.change)\n    connector.emitter.off('disconnect', config._internal.events.disconnect)\n    connector.emitter.on('connect', config._internal.events.connect)\n\n    connections.delete(connector.uid)\n  }\n\n  config.setState((x) => {\n    // if no connections exist, move to disconnected state\n    if (connections.size === 0)\n      return {\n        ...x,\n        connections: new Map(),\n        current: null,\n        status: 'disconnected',\n      }\n\n    // switch over to another connection\n    const nextConnection = connections.values().next().value as Connection\n    return {\n      ...x,\n      connections: new Map(connections),\n      current: nextConnection.connector.uid,\n    }\n  })\n\n  // Set recent connector if exists\n  {\n    const current = config.state.current\n    if (!current) return\n    const connector = config.state.connections.get(current)?.connector\n    if (!connector) return\n    await config.storage?.setItem('recentConnectorId', connector.id)\n  }\n}\n"],"names":[],"mappings":"AAmBA,iDAAA;;;AACO,eAAe,WACpB,MAAc,EACd,aAAmC,CAAA,CAAE;IAErC,IAAI;IACJ,IAAI,WAAW,SAAS,EAAE,YAAY,WAAW,SAAS;SACrD;QACH,MAAM,EAAE,WAAW,EAAE,OAAO,EAAE,GAAG,OAAO,KAAK;QAC7C,MAAM,aAAa,YAAY,GAAG,CAAC;QACnC,YAAY,YAAY;IAC1B;IAEA,MAAM,cAAc,OAAO,KAAK,CAAC,WAAW;IAE5C,IAAI,WAAW;QACb,MAAM,UAAU,UAAU;QAC1B,UAAU,OAAO,CAAC,GAAG,CAAC,UAAU,OAAO,SAAS,CAAC,MAAM,CAAC,MAAM;QAC9D,UAAU,OAAO,CAAC,GAAG,CAAC,cAAc,OAAO,SAAS,CAAC,MAAM,CAAC,UAAU;QACtE,UAAU,OAAO,CAAC,EAAE,CAAC,WAAW,OAAO,SAAS,CAAC,MAAM,CAAC,OAAO;QAE/D,YAAY,MAAM,CAAC,UAAU,GAAG;IAClC;IAEA,OAAO,QAAQ,CAAC,CAAC;QACf,sDAAsD;QACtD,IAAI,YAAY,IAAI,KAAK,GACvB,OAAO;YACL,GAAG,CAAC;YACJ,aAAa,IAAI;YACjB,SAAS;YACT,QAAQ;;QAGZ,oCAAoC;QACpC,MAAM,iBAAiB,YAAY,MAAM,GAAG,IAAI,GAAG,KAAmB;QACtE,OAAO;YACL,GAAG,CAAC;YACJ,aAAa,IAAI,IAAI;YACrB,SAAS,eAAe,SAAS,CAAC,GAAG;;IAEzC;IAEA,iCAAiC;IACjC;QACE,MAAM,UAAU,OAAO,KAAK,CAAC,OAAO;QACpC,IAAI,CAAC,SAAS;QACd,MAAM,YAAY,OAAO,KAAK,CAAC,WAAW,CAAC,GAAG,CAAC,UAAU;QACzD,IAAI,CAAC,WAAW;QAChB,MAAM,OAAO,OAAO,EAAE,QAAQ,qBAAqB,UAAU,EAAE;IACjE;AACF"}},
    {"offset": {"line": 1353, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1358, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@wagmi/core/src/query/disconnect.ts"],"sourcesContent":["import type { MutationOptions } from '@tanstack/query-core'\n\nimport {\n  type DisconnectErrorType,\n  type DisconnectParameters,\n  type DisconnectReturnType,\n  disconnect,\n} from '../actions/disconnect.js'\nimport type { Config } from '../createConfig.js'\nimport type { Mutate, MutateAsync } from './types.js'\n\nexport function disconnectMutationOptions<config extends Config>(\n  config: config,\n) {\n  return {\n    mutationFn(variables) {\n      return disconnect(config, variables)\n    },\n    mutationKey: ['disconnect'],\n  } as const satisfies MutationOptions<\n    DisconnectData,\n    DisconnectErrorType,\n    DisconnectVariables\n  >\n}\n\nexport type DisconnectData = DisconnectReturnType\n\nexport type DisconnectVariables = DisconnectParameters | undefined\n\nexport type DisconnectMutate<context = unknown> = Mutate<\n  DisconnectData,\n  DisconnectErrorType,\n  DisconnectVariables,\n  context\n>\n\nexport type DisconnectMutateAsync<context = unknown> = MutateAsync<\n  DisconnectData,\n  DisconnectErrorType,\n  DisconnectVariables,\n  context\n>\n"],"names":[],"mappings":";;;;;;AAWM,SAAU,0BACd,MAAc;IAEd,OAAO;QACL,YAAW,SAAS;YAClB,OAAO,CAAA,GAAA,mKAAA,CAAA,aAAU,AAAV,EAAW,QAAQ;QAC5B;QACA,aAAa;YAAC;SAAa;;AAM/B"}},
    {"offset": {"line": 1374, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1379, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@wagmi/core/src/actions/getConnections.ts"],"sourcesContent":["import type { Config, Connection } from '../createConfig.js'\nimport type { Compute } from '../types/utils.js'\nimport { deepEqual } from '../utils/deepEqual.js'\n\nexport type GetConnectionsReturnType = Compute<Connection>[]\n\nlet previousConnections: Connection[] = []\n\n/** https://wagmi.sh/core/api/actions/getConnections */\nexport function getConnections(config: Config): GetConnectionsReturnType {\n  const connections = [...config.state.connections.values()]\n  if (config.state.status === 'reconnecting') return previousConnections\n  if (deepEqual(previousConnections, connections)) return previousConnections\n  previousConnections = connections\n  return connections\n}\n"],"names":[],"mappings":";;;;;;AAMA,IAAI,sBAAoC,EAAE;AAGpC,SAAU,eAAe,MAAc;IAC3C,MAAM,cAAc;WAAI,OAAO,KAAK,CAAC,WAAW,CAAC,MAAM;KAAG;IAC1D,IAAI,OAAO,KAAK,CAAC,MAAM,KAAK,gBAAgB,OAAO;IACnD,IAAI,CAAA,GAAA,gKAAA,CAAA,YAAS,AAAT,EAAU,qBAAqB,cAAc,OAAO;IACxD,sBAAsB;IACtB,OAAO;AACT"}},
    {"offset": {"line": 1395, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1400, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@wagmi/core/src/actions/watchConnections.ts"],"sourcesContent":["import type { Config } from '../createConfig.js'\nimport { deepEqual } from '../utils/deepEqual.js'\nimport {\n  type GetConnectionsReturnType,\n  getConnections,\n} from './getConnections.js'\n\nexport type WatchConnectionsParameters = {\n  onChange(\n    connections: GetConnectionsReturnType,\n    prevConnections: GetConnectionsReturnType,\n  ): void\n}\n\nexport type WatchConnectionsReturnType = () => void\n\n/** https://wagmi.sh/core/api/actions/watchConnections */\nexport function watchConnections(\n  config: Config,\n  parameters: WatchConnectionsParameters,\n): WatchConnectionsReturnType {\n  const { onChange } = parameters\n  return config.subscribe(() => getConnections(config), onChange, {\n    equalityFn: deepEqual,\n  })\n}\n"],"names":[],"mappings":";;;;;;;;AAiBM,SAAU,iBACd,MAAc,EACd,UAAsC;IAEtC,MAAM,EAAE,QAAQ,EAAE,GAAG;IACrB,OAAO,OAAO,SAAS,CAAC,IAAM,CAAA,GAAA,uKAAA,CAAA,iBAAc,AAAd,EAAe,SAAS,UAAU;QAC9D,YAAY,gKAAA,CAAA,YAAS;;AAEzB"}},
    {"offset": {"line": 1414, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1419, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@wagmi/core/src/errors/connector.ts"],"sourcesContent":["import type { Connector } from '../createConfig.js'\nimport { BaseError } from './base.js'\n\nexport type ProviderNotFoundErrorType = ProviderNotFoundError & {\n  name: 'ProviderNotFoundError'\n}\nexport class ProviderNotFoundError extends BaseError {\n  override name = 'ProviderNotFoundError'\n  constructor() {\n    super('Provider not found.')\n  }\n}\n\nexport type SwitchChainNotSupportedErrorType = SwitchChainNotSupportedError & {\n  name: 'SwitchChainNotSupportedError'\n}\nexport class SwitchChainNotSupportedError extends BaseError {\n  override name = 'SwitchChainNotSupportedError'\n\n  constructor({ connector }: { connector: Connector }) {\n    super(`\"${connector.name}\" does not support programmatic chain switching.`)\n  }\n}\n"],"names":[],"mappings":";;;;;;;AAMM,MAAO,8BAA8B,4JAAA,CAAA,YAAS;IAElD,aAAA;QACE,KAAK,CAAC;QAFC,OAAA,cAAA,CAAA,IAAA,EAAA,QAAA;;;;mBAAO;;IAGhB;;AAMI,MAAO,qCAAqC,4JAAA,CAAA,YAAS;IAGzD,YAAY,EAAE,SAAS,EAA4B,CAAA;QACjD,KAAK,CAAC,CAAA,CAAA,EAAI,UAAU,IAAI,CAAA,gDAAA,CAAkD;QAHnE,OAAA,cAAA,CAAA,IAAA,EAAA,QAAA;;;;mBAAO;;IAIhB"}},
    {"offset": {"line": 1448, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1453, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@wagmi/core/src/actions/switchChain.ts"],"sourcesContent":["import type {\n  AddEthereumChainParameter,\n  UserRejectedRequestErrorType,\n  SwitchChainErrorType as viem_SwitchChainErrorType,\n} from 'viem'\n\nimport type { Config } from '../createConfig.js'\nimport type { BaseErrorType, ErrorType } from '../errors/base.js'\nimport {\n  ChainNotConfiguredError,\n  type ChainNotConfiguredErrorType,\n} from '../errors/config.js'\nimport {\n  type ProviderNotFoundErrorType,\n  SwitchChainNotSupportedError,\n  type SwitchChainNotSupportedErrorType,\n} from '../errors/connector.js'\nimport type { ConnectorParameter } from '../types/properties.js'\nimport type { Compute, ExactPartial } from '../types/utils.js'\n\nexport type SwitchChainParameters<\n  config extends Config = Config,\n  chainId extends\n    config['chains'][number]['id'] = config['chains'][number]['id'],\n> = Compute<\n  ConnectorParameter & {\n    chainId: chainId | config['chains'][number]['id']\n    addEthereumChainParameter?:\n      | Compute<ExactPartial<Omit<AddEthereumChainParameter, 'chainId'>>>\n      | undefined\n  }\n>\n\nexport type SwitchChainReturnType<\n  config extends Config = Config,\n  chainId extends\n    config['chains'][number]['id'] = config['chains'][number]['id'],\n> = Extract<\n  config['chains'][number],\n  { id: Config extends config ? number : chainId }\n>\n\nexport type SwitchChainErrorType =\n  | SwitchChainNotSupportedErrorType\n  | ChainNotConfiguredErrorType\n  // connector.switchChain()\n  | ProviderNotFoundErrorType\n  | UserRejectedRequestErrorType\n  // base\n  | BaseErrorType\n  | ErrorType\n  // viem\n  | viem_SwitchChainErrorType\n\n/** https://wagmi.sh/core/api/actions/switchChain */\nexport async function switchChain<\n  config extends Config,\n  chainId extends config['chains'][number]['id'],\n>(\n  config: config,\n  parameters: SwitchChainParameters<config, chainId>,\n): Promise<SwitchChainReturnType<config, chainId>> {\n  const { addEthereumChainParameter, chainId } = parameters\n\n  const connection = config.state.connections.get(\n    parameters.connector?.uid ?? config.state.current!,\n  )\n  if (connection) {\n    const connector = connection.connector\n    if (!connector.switchChain)\n      throw new SwitchChainNotSupportedError({ connector })\n    const chain = await connector.switchChain({\n      addEthereumChainParameter,\n      chainId,\n    })\n    return chain as SwitchChainReturnType<config, chainId>\n  }\n\n  const chain = config.chains.find((x) => x.id === chainId)\n  if (!chain) throw new ChainNotConfiguredError()\n  config.setState((x) => ({ ...x, chainId }))\n  return chain as SwitchChainReturnType<config, chainId>\n}\n"],"names":[],"mappings":";;;;;;;;AAuDO,eAAe,YAIpB,MAAc,EACd,UAAkD;IAElD,MAAM,EAAE,yBAAyB,EAAE,OAAO,EAAE,GAAG;IAE/C,MAAM,aAAa,OAAO,KAAK,CAAC,WAAW,CAAC,GAAG,CAC7C,WAAW,SAAS,EAAE,OAAO,OAAO,KAAK,CAAC,OAAQ;IAEpD,IAAI,YAAY;QACd,MAAM,YAAY,WAAW,SAAS;QACtC,IAAI,CAAC,UAAU,WAAW,EACxB,MAAM,IAAI,iKAAA,CAAA,+BAA4B,CAAC;YAAE;QAAS;QACpD,MAAM,QAAQ,MAAM,UAAU,WAAW,CAAC;YACxC;YACA;;QAEF,OAAO;IACT;IAEA,MAAM,QAAQ,OAAO,MAAM,CAAC,IAAI,CAAC,CAAC,IAAM,EAAE,EAAE,KAAK;IACjD,IAAI,CAAC,OAAO,MAAM,IAAI,8JAAA,CAAA,0BAAuB;IAC7C,OAAO,QAAQ,CAAC,CAAC,IAAM,CAAC;YAAE,GAAG,CAAC;YAAE;QAAO,CAAE;IACzC,OAAO;AACT"}},
    {"offset": {"line": 1483, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1488, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@wagmi/core/src/query/switchChain.ts"],"sourcesContent":["import type { MutateOptions, MutationOptions } from '@tanstack/query-core'\n\nimport {\n  type SwitchChainErrorType,\n  type SwitchChainParameters,\n  type SwitchChainReturnType,\n  switchChain,\n} from '../actions/switchChain.js'\nimport type { Config } from '../createConfig.js'\nimport type { Compute } from '../types/utils.js'\n\nexport function switchChainMutationOptions<config extends Config>(\n  config: config,\n) {\n  return {\n    mutationFn(variables) {\n      return switchChain(config, variables)\n    },\n    mutationKey: ['switchChain'],\n  } as const satisfies MutationOptions<\n    SwitchChainData<config, config['chains'][number]['id']>,\n    SwitchChainErrorType,\n    SwitchChainVariables<config, config['chains'][number]['id']>\n  >\n}\n\nexport type SwitchChainData<\n  config extends Config,\n  chainId extends config['chains'][number]['id'],\n> = Compute<SwitchChainReturnType<config, chainId>>\n\nexport type SwitchChainVariables<\n  config extends Config,\n  chainId extends config['chains'][number]['id'],\n> = Compute<SwitchChainParameters<config, chainId>>\n\nexport type SwitchChainMutate<config extends Config, context = unknown> = <\n  chainId extends config['chains'][number]['id'],\n>(\n  variables: SwitchChainVariables<config, chainId>,\n  options?:\n    | Compute<\n        MutateOptions<\n          SwitchChainData<config, chainId>,\n          SwitchChainErrorType,\n          Compute<SwitchChainVariables<config, chainId>>,\n          context\n        >\n      >\n    | undefined,\n) => void\n\nexport type SwitchChainMutateAsync<config extends Config, context = unknown> = <\n  chainId extends config['chains'][number]['id'],\n>(\n  variables: SwitchChainVariables<config, chainId>,\n  options?:\n    | Compute<\n        MutateOptions<\n          SwitchChainData<config, chainId>,\n          SwitchChainErrorType,\n          Compute<SwitchChainVariables<config, chainId>>,\n          context\n        >\n      >\n    | undefined,\n) => Promise<SwitchChainData<config, chainId>>\n"],"names":[],"mappings":";;;;;;AAWM,SAAU,2BACd,MAAc;IAEd,OAAO;QACL,YAAW,SAAS;YAClB,OAAO,CAAA,GAAA,oKAAA,CAAA,cAAW,AAAX,EAAY,QAAQ;QAC7B;QACA,aAAa;YAAC;SAAc;;AAMhC"}},
    {"offset": {"line": 1504, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1509, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@wagmi/core/src/actions/getChains.ts"],"sourcesContent":["import type { Chain } from 'viem'\nimport type { Config } from '../createConfig.js'\nimport { deepEqual } from '../utils/deepEqual.js'\n\nexport type GetChainsReturnType<config extends Config = Config> = readonly [\n  ...config['chains'],\n  ...Chain[],\n]\n\nlet previousChains: readonly Chain[] = []\n\n/** https://wagmi.sh/core/api/actions/getChains */\nexport function getChains<config extends Config>(\n  config: config,\n): GetChainsReturnType<config> {\n  const chains = config.chains\n  if (deepEqual(previousChains, chains))\n    return previousChains as GetChainsReturnType<config>\n  previousChains = chains\n  return chains as unknown as GetChainsReturnType<config>\n}\n"],"names":[],"mappings":";;;;;;AASA,IAAI,iBAAmC,EAAE;AAGnC,SAAU,UACd,MAAc;IAEd,MAAM,SAAS,OAAO,MAAM;IAC5B,IAAI,CAAA,GAAA,gKAAA,CAAA,YAAS,AAAT,EAAU,gBAAgB,SAC5B,OAAO;IACT,iBAAiB;IACjB,OAAO;AACT"}},
    {"offset": {"line": 1522, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1527, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@wagmi/core/src/actions/watchChains.ts"],"sourcesContent":["import type { Config } from '../createConfig.js'\nimport type { GetChainsReturnType } from './getChains.js'\n\nexport type WatchChainsParameters<config extends Config = Config> = {\n  onChange(\n    chains: GetChainsReturnType<config>,\n    prevChains: GetChainsReturnType<config>,\n  ): void\n}\n\nexport type WatchChainsReturnType = () => void\n\n/**\n * @internal\n * We don't expose this because as far as consumers know, you can't chainge (lol) `config.chains` at runtime.\n * Setting `config.chains` via `config._internal.chains.setState(...)` is an extremely advanced use case that's not worth documenting or supporting in the public API at this time.\n */\nexport function watchChains<config extends Config>(\n  config: config,\n  parameters: WatchChainsParameters<config>,\n): WatchChainsReturnType {\n  const { onChange } = parameters\n  return config._internal.chains.subscribe((chains, prevChains) => {\n    onChange(\n      chains as unknown as GetChainsReturnType<config>,\n      prevChains as unknown as GetChainsReturnType<config>,\n    )\n  })\n}\n"],"names":[],"mappings":"AAYA;;;;;;;AAKM,SAAU,YACd,MAAc,EACd,UAAyC;IAEzC,MAAM,EAAE,QAAQ,EAAE,GAAG;IACrB,OAAO,OAAO,SAAS,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,QAAQ;QAChD,SACE,QACA;IAEJ;AACF"}},
    {"offset": {"line": 1540, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1545, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@wagmi/core/src/connectors/createConnector.ts"],"sourcesContent":["import type {\n  AddEthereumChainParameter,\n  Address,\n  Chain,\n  Client,\n  ProviderConnectInfo,\n  ProviderMessage,\n} from 'viem'\n\nimport type { Transport } from '../createConfig.js'\nimport type { Emitter } from '../createEmitter.js'\nimport type { Storage } from '../createStorage.js'\nimport type { Compute, ExactPartial, StrictOmit } from '../types/utils.js'\n\nexport type ConnectorEventMap = {\n  change: {\n    accounts?: readonly Address[] | undefined\n    chainId?: number | undefined\n  }\n  connect: { accounts: readonly Address[]; chainId: number }\n  disconnect: never\n  error: { error: Error }\n  message: { type: string; data?: unknown | undefined }\n}\n\nexport type CreateConnectorFn<\n  provider = unknown,\n  properties extends Record<string, unknown> = Record<string, unknown>,\n  storageItem extends Record<string, unknown> = Record<string, unknown>,\n> = (config: {\n  chains: readonly [Chain, ...Chain[]]\n  emitter: Emitter<ConnectorEventMap>\n  storage?: Compute<Storage<storageItem>> | null | undefined\n  transports?: Record<number, Transport> | undefined\n}) => Compute<\n  {\n    readonly icon?: string | undefined\n    readonly id: string\n    readonly name: string\n    readonly rdns?: string | undefined\n    readonly supportsSimulation?: boolean | undefined\n    readonly type: string\n\n    setup?(): Promise<void>\n    connect(\n      parameters?:\n        | { chainId?: number | undefined; isReconnecting?: boolean | undefined }\n        | undefined,\n    ): Promise<{\n      accounts: readonly Address[]\n      chainId: number\n    }>\n    disconnect(): Promise<void>\n    getAccounts(): Promise<readonly Address[]>\n    getChainId(): Promise<number>\n    getProvider(\n      parameters?: { chainId?: number | undefined } | undefined,\n    ): Promise<provider>\n    getClient?(\n      parameters?: { chainId?: number | undefined } | undefined,\n    ): Promise<Client>\n    isAuthorized(): Promise<boolean>\n    switchChain?(\n      parameters: Compute<{\n        addEthereumChainParameter?:\n          | ExactPartial<StrictOmit<AddEthereumChainParameter, 'chainId'>>\n          | undefined\n        chainId: number\n      }>,\n    ): Promise<Chain>\n\n    onAccountsChanged(accounts: string[]): void\n    onChainChanged(chainId: string): void\n    onConnect?(connectInfo: ProviderConnectInfo): void\n    onDisconnect(error?: Error | undefined): void\n    onMessage?(message: ProviderMessage): void\n  } & properties\n>\n\nexport function createConnector<\n  provider,\n  properties extends Record<string, unknown> = Record<string, unknown>,\n  storageItem extends Record<string, unknown> = Record<string, unknown>,\n>(createConnectorFn: CreateConnectorFn<provider, properties, storageItem>) {\n  return createConnectorFn\n}\n"],"names":[],"mappings":";;;AA+EM,SAAU,gBAId,iBAAuE;IACvE,OAAO;AACT"}},
    {"offset": {"line": 1551, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1556, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@wagmi/core/src/utils/extractRpcUrls.ts"],"sourcesContent":["import type { Chain, Transport } from 'viem'\n\ntype ExtractRpcUrlsParameters = {\n  transports?: Record<string, Transport> | undefined\n  chain: Chain\n}\n\nexport function extractRpcUrls(parameters: ExtractRpcUrlsParameters) {\n  const { chain } = parameters\n  const fallbackUrl = chain.rpcUrls.default.http[0]\n\n  if (!parameters.transports) return [fallbackUrl]\n\n  const transport = parameters.transports?.[chain.id]?.({ chain })\n  const transports = (transport?.value?.transports as NonNullable<\n    typeof transport\n  >[]) || [transport]\n  return transports.map(({ value }) => value?.url || fallbackUrl)\n}\n"],"names":[],"mappings":";;;AAOM,SAAU,eAAe,UAAoC;IACjE,MAAM,EAAE,KAAK,EAAE,GAAG;IAClB,MAAM,cAAc,MAAM,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;IAEjD,IAAI,CAAC,WAAW,UAAU,EAAE,OAAO;QAAC;KAAY;IAEhD,MAAM,YAAY,WAAW,UAAU,EAAE,CAAC,MAAM,EAAE,CAAC,GAAG;QAAE;IAAK;IAC7D,MAAM,aAAc,WAAW,OAAO,cAE9B;QAAC;KAAU;IACnB,OAAO,WAAW,GAAG,CAAC,CAAC,EAAE,KAAK,EAAE,GAAK,OAAO,OAAO;AACrD"}},
    {"offset": {"line": 1573, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1578, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@wagmi/core/src/connectors/injected.ts"],"sourcesContent":["import {\n  type AddEthereumChainParameter,\n  type Address,\n  type EIP1193Provider,\n  type ProviderConnectInfo,\n  type ProviderRpcError,\n  ResourceUnavailableRpcError,\n  type RpcError,\n  SwitchChainError,\n  UserRejectedRequestError,\n  getAddress,\n  numberToHex,\n  withRetry,\n  withTimeout,\n} from 'viem'\n\nimport type { Connector } from '../createConfig.js'\nimport { ChainNotConfiguredError } from '../errors/config.js'\nimport { ProviderNotFoundError } from '../errors/connector.js'\nimport type { Compute } from '../types/utils.js'\nimport { createConnector } from './createConnector.js'\n\nexport type InjectedParameters = {\n  /**\n   * Some injected providers do not support programmatic disconnect.\n   * This flag simulates the disconnect behavior by keeping track of connection status in storage.\n   * @default true\n   */\n  shimDisconnect?: boolean | undefined\n  /**\n   * [EIP-1193](https://eips.ethereum.org/EIPS/eip-1193) Ethereum Provider to target\n   */\n  target?: TargetId | Target | (() => Target | undefined) | undefined\n  unstable_shimAsyncInject?: boolean | number | undefined\n}\n\n// Regex of wallets/providers that can accurately simulate contract calls & display contract revert reasons.\nconst supportsSimulationIdRegex = /(rabby|trustwallet)/\n\ninjected.type = 'injected' as const\nexport function injected(parameters: InjectedParameters = {}) {\n  const { shimDisconnect = true, unstable_shimAsyncInject } = parameters\n\n  function getTarget(): Compute<Target & { id: string }> {\n    const target = parameters.target\n    if (typeof target === 'function') {\n      const result = target()\n      if (result) return result\n    }\n\n    if (typeof target === 'object') return target\n\n    if (typeof target === 'string')\n      return {\n        ...(targetMap[target as keyof typeof targetMap] ?? {\n          id: target,\n          name: `${target[0]!.toUpperCase()}${target.slice(1)}`,\n          provider: `is${target[0]!.toUpperCase()}${target.slice(1)}`,\n        }),\n      }\n\n    return {\n      id: 'injected',\n      name: 'Injected',\n      provider(window) {\n        return window?.ethereum\n      },\n    }\n  }\n\n  type Provider = WalletProvider | undefined\n  type Properties = {\n    onConnect(connectInfo: ProviderConnectInfo): void\n  }\n  type StorageItem = {\n    [_ in 'injected.connected' | `${string}.disconnected`]: true\n  }\n\n  let accountsChanged: Connector['onAccountsChanged'] | undefined\n  let chainChanged: Connector['onChainChanged'] | undefined\n  let connect: Connector['onConnect'] | undefined\n  let disconnect: Connector['onDisconnect'] | undefined\n\n  return createConnector<Provider, Properties, StorageItem>((config) => ({\n    get icon() {\n      return getTarget().icon\n    },\n    get id() {\n      return getTarget().id\n    },\n    get name() {\n      return getTarget().name\n    },\n    get supportsSimulation() {\n      return supportsSimulationIdRegex.test(this.id.toLowerCase())\n    },\n    type: injected.type,\n    async setup() {\n      const provider = await this.getProvider()\n      // Only start listening for events if `target` is set, otherwise `injected()` will also receive events\n      if (provider?.on && parameters.target) {\n        if (!connect) {\n          connect = this.onConnect.bind(this)\n          provider.on('connect', connect)\n        }\n\n        // We shouldn't need to listen for `'accountsChanged'` here since the `'connect'` event should suffice (and wallet shouldn't be connected yet).\n        // Some wallets, like MetaMask, do not implement the `'connect'` event and overload `'accountsChanged'` instead.\n        if (!accountsChanged) {\n          accountsChanged = this.onAccountsChanged.bind(this)\n          provider.on('accountsChanged', accountsChanged)\n        }\n      }\n    },\n    async connect({ chainId, isReconnecting } = {}) {\n      const provider = await this.getProvider()\n      if (!provider) throw new ProviderNotFoundError()\n\n      let accounts: readonly Address[] = []\n      if (isReconnecting) accounts = await this.getAccounts().catch(() => [])\n      else if (shimDisconnect) {\n        // Attempt to show another prompt for selecting account if `shimDisconnect` flag is enabled\n        try {\n          const permissions = await provider.request({\n            method: 'wallet_requestPermissions',\n            params: [{ eth_accounts: {} }],\n          })\n          accounts = (permissions[0]?.caveats?.[0]?.value as string[])?.map(\n            (x) => getAddress(x),\n          )\n          // `'wallet_requestPermissions'` can return a different order of accounts than `'eth_accounts'`\n          // switch to `'eth_accounts'` ordering if more than one account is connected\n          // https://github.com/wevm/wagmi/issues/4140\n          if (accounts.length > 0) {\n            const sortedAccounts = await this.getAccounts()\n            accounts = sortedAccounts\n          }\n        } catch (err) {\n          const error = err as RpcError\n          // Not all injected providers support `wallet_requestPermissions` (e.g. MetaMask iOS).\n          // Only bubble up error if user rejects request\n          if (error.code === UserRejectedRequestError.code)\n            throw new UserRejectedRequestError(error)\n          // Or prompt is already open\n          if (error.code === ResourceUnavailableRpcError.code) throw error\n        }\n      }\n\n      try {\n        if (!accounts?.length && !isReconnecting) {\n          const requestedAccounts = await provider.request({\n            method: 'eth_requestAccounts',\n          })\n          accounts = requestedAccounts.map((x) => getAddress(x))\n        }\n\n        // Manage EIP-1193 event listeners\n        // https://eips.ethereum.org/EIPS/eip-1193#events\n        if (connect) {\n          provider.removeListener('connect', connect)\n          connect = undefined\n        }\n        if (!accountsChanged) {\n          accountsChanged = this.onAccountsChanged.bind(this)\n          provider.on('accountsChanged', accountsChanged)\n        }\n        if (!chainChanged) {\n          chainChanged = this.onChainChanged.bind(this)\n          provider.on('chainChanged', chainChanged)\n        }\n        if (!disconnect) {\n          disconnect = this.onDisconnect.bind(this)\n          provider.on('disconnect', disconnect)\n        }\n\n        // Switch to chain if provided\n        let currentChainId = await this.getChainId()\n        if (chainId && currentChainId !== chainId) {\n          const chain = await this.switchChain!({ chainId }).catch((error) => {\n            if (error.code === UserRejectedRequestError.code) throw error\n            return { id: currentChainId }\n          })\n          currentChainId = chain?.id ?? currentChainId\n        }\n\n        // Remove disconnected shim if it exists\n        if (shimDisconnect)\n          await config.storage?.removeItem(`${this.id}.disconnected`)\n\n        // Add connected shim if no target exists\n        if (!parameters.target)\n          await config.storage?.setItem('injected.connected', true)\n\n        return { accounts, chainId: currentChainId }\n      } catch (err) {\n        const error = err as RpcError\n        if (error.code === UserRejectedRequestError.code)\n          throw new UserRejectedRequestError(error)\n        if (error.code === ResourceUnavailableRpcError.code)\n          throw new ResourceUnavailableRpcError(error)\n        throw error\n      }\n    },\n    async disconnect() {\n      const provider = await this.getProvider()\n      if (!provider) throw new ProviderNotFoundError()\n\n      // Manage EIP-1193 event listeners\n      if (chainChanged) {\n        provider.removeListener('chainChanged', chainChanged)\n        chainChanged = undefined\n      }\n      if (disconnect) {\n        provider.removeListener('disconnect', disconnect)\n        disconnect = undefined\n      }\n      if (!connect) {\n        connect = this.onConnect.bind(this)\n        provider.on('connect', connect)\n      }\n\n      // Experimental support for MetaMask disconnect\n      // https://github.com/MetaMask/metamask-improvement-proposals/blob/main/MIPs/mip-2.md\n      try {\n        // Adding timeout as not all wallets support this method and can hang\n        // https://github.com/wevm/wagmi/issues/4064\n        await withTimeout(\n          () =>\n            // TODO: Remove explicit type for viem@3\n            provider.request<{\n              Method: 'wallet_revokePermissions'\n              Parameters: [permissions: { eth_accounts: Record<string, any> }]\n              ReturnType: null\n            }>({\n              // `'wallet_revokePermissions'` added in `viem@2.10.3`\n              method: 'wallet_revokePermissions',\n              params: [{ eth_accounts: {} }],\n            }),\n          { timeout: 100 },\n        )\n      } catch {}\n\n      // Add shim signalling connector is disconnected\n      if (shimDisconnect) {\n        await config.storage?.setItem(`${this.id}.disconnected`, true)\n      }\n\n      if (!parameters.target)\n        await config.storage?.removeItem('injected.connected')\n    },\n    async getAccounts() {\n      const provider = await this.getProvider()\n      if (!provider) throw new ProviderNotFoundError()\n      const accounts = await provider.request({ method: 'eth_accounts' })\n      return accounts.map((x) => getAddress(x))\n    },\n    async getChainId() {\n      const provider = await this.getProvider()\n      if (!provider) throw new ProviderNotFoundError()\n      const hexChainId = await provider.request({ method: 'eth_chainId' })\n      return Number(hexChainId)\n    },\n    async getProvider() {\n      if (typeof window === 'undefined') return undefined\n\n      let provider: Provider\n      const target = getTarget()\n      if (typeof target.provider === 'function')\n        provider = target.provider(window as Window | undefined)\n      else if (typeof target.provider === 'string')\n        provider = findProvider(window, target.provider)\n      else provider = target.provider\n\n      // Some wallets do not conform to EIP-1193 (e.g. Trust Wallet)\n      // https://github.com/wevm/wagmi/issues/3526#issuecomment-1912683002\n      if (provider && !provider.removeListener) {\n        // Try using `off` handler if it exists, otherwise noop\n        if ('off' in provider && typeof provider.off === 'function')\n          provider.removeListener =\n            provider.off as typeof provider.removeListener\n        else provider.removeListener = () => {}\n      }\n\n      return provider\n    },\n    async isAuthorized() {\n      try {\n        const isDisconnected =\n          shimDisconnect &&\n          // If shim exists in storage, connector is disconnected\n          (await config.storage?.getItem(`${this.id}.disconnected`))\n        if (isDisconnected) return false\n\n        // Don't allow injected connector to connect if no target is set and it hasn't already connected\n        // (e.g. flag in storage is not set). This prevents a targetless injected connector from connecting\n        // automatically whenever there is a targeted connector configured.\n        if (!parameters.target) {\n          const connected = await config.storage?.getItem('injected.connected')\n          if (!connected) return false\n        }\n\n        const provider = await this.getProvider()\n        if (!provider) {\n          if (\n            unstable_shimAsyncInject !== undefined &&\n            unstable_shimAsyncInject !== false\n          ) {\n            // If no provider is found, check for async injection\n            // https://github.com/wevm/references/issues/167\n            // https://github.com/MetaMask/detect-provider\n            const handleEthereum = async () => {\n              if (typeof window !== 'undefined')\n                window.removeEventListener(\n                  'ethereum#initialized',\n                  handleEthereum,\n                )\n              const provider = await this.getProvider()\n              return !!provider\n            }\n            const timeout =\n              typeof unstable_shimAsyncInject === 'number'\n                ? unstable_shimAsyncInject\n                : 1_000\n            const res = await Promise.race([\n              ...(typeof window !== 'undefined'\n                ? [\n                    new Promise<boolean>((resolve) =>\n                      window.addEventListener(\n                        'ethereum#initialized',\n                        () => resolve(handleEthereum()),\n                        { once: true },\n                      ),\n                    ),\n                  ]\n                : []),\n              new Promise<boolean>((resolve) =>\n                setTimeout(() => resolve(handleEthereum()), timeout),\n              ),\n            ])\n            if (res) return true\n          }\n\n          throw new ProviderNotFoundError()\n        }\n\n        // Use retry strategy as some injected wallets (e.g. MetaMask) fail to\n        // immediately resolve JSON-RPC requests on page load.\n        const accounts = await withRetry(() => this.getAccounts())\n        return !!accounts.length\n      } catch {\n        return false\n      }\n    },\n    async switchChain({ addEthereumChainParameter, chainId }) {\n      const provider = await this.getProvider()\n      if (!provider) throw new ProviderNotFoundError()\n\n      const chain = config.chains.find((x) => x.id === chainId)\n      if (!chain) throw new SwitchChainError(new ChainNotConfiguredError())\n\n      try {\n        await Promise.all([\n          provider\n            .request({\n              method: 'wallet_switchEthereumChain',\n              params: [{ chainId: numberToHex(chainId) }],\n            })\n            // During `'wallet_switchEthereumChain'`, MetaMask makes a `'net_version'` RPC call to the target chain.\n            // If this request fails, MetaMask does not emit the `'chainChanged'` event, but will still switch the chain.\n            // To counter this behavior, we request and emit the current chain ID to confirm the chain switch either via\n            // this callback or an externally emitted `'chainChanged'` event.\n            // https://github.com/MetaMask/metamask-extension/issues/24247\n            .then(async () => {\n              const currentChainId = await this.getChainId()\n              if (currentChainId === chainId)\n                config.emitter.emit('change', { chainId })\n            }),\n          new Promise<void>((resolve) => {\n            const listener = ((data) => {\n              if ('chainId' in data && data.chainId === chainId) {\n                config.emitter.off('change', listener)\n                resolve()\n              }\n            }) satisfies Parameters<typeof config.emitter.on>[1]\n            config.emitter.on('change', listener)\n          }),\n        ])\n        return chain\n      } catch (err) {\n        const error = err as RpcError\n\n        // Indicates chain is not added to provider\n        if (\n          error.code === 4902 ||\n          // Unwrapping for MetaMask Mobile\n          // https://github.com/MetaMask/metamask-mobile/issues/2944#issuecomment-976988719\n          (error as ProviderRpcError<{ originalError?: { code: number } }>)\n            ?.data?.originalError?.code === 4902\n        ) {\n          try {\n            const { default: blockExplorer, ...blockExplorers } =\n              chain.blockExplorers ?? {}\n            let blockExplorerUrls: string[] | undefined\n            if (addEthereumChainParameter?.blockExplorerUrls)\n              blockExplorerUrls = addEthereumChainParameter.blockExplorerUrls\n            else if (blockExplorer)\n              blockExplorerUrls = [\n                blockExplorer.url,\n                ...Object.values(blockExplorers).map((x) => x.url),\n              ]\n\n            let rpcUrls: readonly string[]\n            if (addEthereumChainParameter?.rpcUrls?.length)\n              rpcUrls = addEthereumChainParameter.rpcUrls\n            else rpcUrls = [chain.rpcUrls.default?.http[0] ?? '']\n\n            const addEthereumChain = {\n              blockExplorerUrls,\n              chainId: numberToHex(chainId),\n              chainName: addEthereumChainParameter?.chainName ?? chain.name,\n              iconUrls: addEthereumChainParameter?.iconUrls,\n              nativeCurrency:\n                addEthereumChainParameter?.nativeCurrency ??\n                chain.nativeCurrency,\n              rpcUrls,\n            } satisfies AddEthereumChainParameter\n\n            await provider.request({\n              method: 'wallet_addEthereumChain',\n              params: [addEthereumChain],\n            })\n\n            const currentChainId = await this.getChainId()\n            if (currentChainId !== chainId)\n              throw new UserRejectedRequestError(\n                new Error('User rejected switch after adding network.'),\n              )\n\n            return chain\n          } catch (error) {\n            throw new UserRejectedRequestError(error as Error)\n          }\n        }\n\n        if (error.code === UserRejectedRequestError.code)\n          throw new UserRejectedRequestError(error)\n        throw new SwitchChainError(error)\n      }\n    },\n    async onAccountsChanged(accounts) {\n      // Disconnect if there are no accounts\n      if (accounts.length === 0) this.onDisconnect()\n      // Connect if emitter is listening for connect event (e.g. is disconnected and connects through wallet interface)\n      else if (config.emitter.listenerCount('connect')) {\n        const chainId = (await this.getChainId()).toString()\n        this.onConnect({ chainId })\n        // Remove disconnected shim if it exists\n        if (shimDisconnect)\n          await config.storage?.removeItem(`${this.id}.disconnected`)\n      }\n      // Regular change event\n      else\n        config.emitter.emit('change', {\n          accounts: accounts.map((x) => getAddress(x)),\n        })\n    },\n    onChainChanged(chain) {\n      const chainId = Number(chain)\n      config.emitter.emit('change', { chainId })\n    },\n    async onConnect(connectInfo) {\n      const accounts = await this.getAccounts()\n      if (accounts.length === 0) return\n\n      const chainId = Number(connectInfo.chainId)\n      config.emitter.emit('connect', { accounts, chainId })\n\n      // Manage EIP-1193 event listeners\n      const provider = await this.getProvider()\n      if (provider) {\n        if (connect) {\n          provider.removeListener('connect', connect)\n          connect = undefined\n        }\n        if (!accountsChanged) {\n          accountsChanged = this.onAccountsChanged.bind(this)\n          provider.on('accountsChanged', accountsChanged)\n        }\n        if (!chainChanged) {\n          chainChanged = this.onChainChanged.bind(this)\n          provider.on('chainChanged', chainChanged)\n        }\n        if (!disconnect) {\n          disconnect = this.onDisconnect.bind(this)\n          provider.on('disconnect', disconnect)\n        }\n      }\n    },\n    async onDisconnect(error) {\n      const provider = await this.getProvider()\n\n      // If MetaMask emits a `code: 1013` error, wait for reconnection before disconnecting\n      // https://github.com/MetaMask/providers/pull/120\n      if (error && (error as RpcError<1013>).code === 1013) {\n        if (provider && !!(await this.getAccounts()).length) return\n      }\n\n      // No need to remove `${this.id}.disconnected` from storage because `onDisconnect` is typically\n      // only called when the wallet is disconnected through the wallet's interface, meaning the wallet\n      // actually disconnected and we don't need to simulate it.\n      config.emitter.emit('disconnect')\n\n      // Manage EIP-1193 event listeners\n      if (provider) {\n        if (chainChanged) {\n          provider.removeListener('chainChanged', chainChanged)\n          chainChanged = undefined\n        }\n        if (disconnect) {\n          provider.removeListener('disconnect', disconnect)\n          disconnect = undefined\n        }\n        if (!connect) {\n          connect = this.onConnect.bind(this)\n          provider.on('connect', connect)\n        }\n      }\n    },\n  }))\n}\n\nconst targetMap = {\n  coinbaseWallet: {\n    id: 'coinbaseWallet',\n    name: 'Coinbase Wallet',\n    provider(window) {\n      if (window?.coinbaseWalletExtension) return window.coinbaseWalletExtension\n      return findProvider(window, 'isCoinbaseWallet')\n    },\n  },\n  metaMask: {\n    id: 'metaMask',\n    name: 'MetaMask',\n    provider(window) {\n      return findProvider(window, (provider) => {\n        if (!provider.isMetaMask) return false\n        // Brave tries to make itself look like MetaMask\n        // Could also try RPC `web3_clientVersion` if following is unreliable\n        if (provider.isBraveWallet && !provider._events && !provider._state)\n          return false\n        // Other wallets that try to look like MetaMask\n        const flags = [\n          'isApexWallet',\n          'isAvalanche',\n          'isBitKeep',\n          'isBlockWallet',\n          'isKuCoinWallet',\n          'isMathWallet',\n          'isOkxWallet',\n          'isOKExWallet',\n          'isOneInchIOSWallet',\n          'isOneInchAndroidWallet',\n          'isOpera',\n          'isPortal',\n          'isRabby',\n          'isTokenPocket',\n          'isTokenary',\n          'isUniswapWallet',\n          'isZerion',\n        ] satisfies WalletProviderFlags[]\n        for (const flag of flags) if (provider[flag]) return false\n        return true\n      })\n    },\n  },\n  phantom: {\n    id: 'phantom',\n    name: 'Phantom',\n    provider(window) {\n      if (window?.phantom?.ethereum) return window.phantom?.ethereum\n      return findProvider(window, 'isPhantom')\n    },\n  },\n} as const satisfies TargetMap\n\ntype TargetMap = { [_ in TargetId]?: Target | undefined }\n\ntype Target = {\n  icon?: string | undefined\n  id: string\n  name: string\n  provider:\n    | WalletProviderFlags\n    | WalletProvider\n    | ((window?: Window | undefined) => WalletProvider | undefined)\n}\n\n/** @deprecated */\ntype TargetId = Compute<WalletProviderFlags> extends `is${infer name}`\n  ? name extends `${infer char}${infer rest}`\n    ? `${Lowercase<char>}${rest}`\n    : never\n  : never\n\n/**\n * @deprecated As of 2024/10/16, we are no longer accepting new provider flags as EIP-6963 should be used instead.\n */\ntype WalletProviderFlags =\n  | 'isApexWallet'\n  | 'isAvalanche'\n  | 'isBackpack'\n  | 'isBifrost'\n  | 'isBitKeep'\n  | 'isBitski'\n  | 'isBlockWallet'\n  | 'isBraveWallet'\n  | 'isCoinbaseWallet'\n  | 'isDawn'\n  | 'isEnkrypt'\n  | 'isExodus'\n  | 'isFrame'\n  | 'isFrontier'\n  | 'isGamestop'\n  | 'isHyperPay'\n  | 'isImToken'\n  | 'isKuCoinWallet'\n  | 'isMathWallet'\n  | 'isMetaMask'\n  | 'isOkxWallet'\n  | 'isOKExWallet'\n  | 'isOneInchAndroidWallet'\n  | 'isOneInchIOSWallet'\n  | 'isOpera'\n  | 'isPhantom'\n  | 'isPortal'\n  | 'isRabby'\n  | 'isRainbow'\n  | 'isStatus'\n  | 'isTally'\n  | 'isTokenPocket'\n  | 'isTokenary'\n  | 'isTrust'\n  | 'isTrustWallet'\n  | 'isUniswapWallet'\n  | 'isXDEFI'\n  | 'isZerion'\n\ntype WalletProvider = Compute<\n  EIP1193Provider & {\n    [key in WalletProviderFlags]?: true | undefined\n  } & {\n    providers?: WalletProvider[] | undefined\n    /** Only exists in MetaMask as of 2022/04/03 */\n    _events?: { connect?: (() => void) | undefined } | undefined\n    /** Only exists in MetaMask as of 2022/04/03 */\n    _state?:\n      | {\n          accounts?: string[]\n          initialized?: boolean\n          isConnected?: boolean\n          isPermanentlyDisconnected?: boolean\n          isUnlocked?: boolean\n        }\n      | undefined\n  }\n>\n\ntype Window = {\n  coinbaseWalletExtension?: WalletProvider | undefined\n  ethereum?: WalletProvider | undefined\n  phantom?: { ethereum: WalletProvider } | undefined\n}\n\nfunction findProvider(\n  window: globalThis.Window | Window | undefined,\n  select?: WalletProviderFlags | ((provider: WalletProvider) => boolean),\n) {\n  function isProvider(provider: WalletProvider) {\n    if (typeof select === 'function') return select(provider)\n    if (typeof select === 'string') return provider[select]\n    return true\n  }\n\n  const ethereum = (window as Window).ethereum\n  if (ethereum?.providers)\n    return ethereum.providers.find((provider) => isProvider(provider))\n  if (ethereum && isProvider(ethereum)) return ethereum\n  return undefined\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 2077, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2082, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@wagmi/core/src/createEmitter.ts"],"sourcesContent":["import { EventEmitter } from 'eventemitter3'\n\ntype EventMap = Record<string, object | never>\ntype EventKey<eventMap extends EventMap> = string & keyof eventMap\ntype EventFn<parameters extends unknown[] = any[]> = (\n  ...parameters: parameters\n) => void\nexport type EventData<\n  eventMap extends EventMap,\n  eventName extends keyof eventMap,\n> = (eventMap[eventName] extends [never] ? unknown : eventMap[eventName]) & {\n  uid: string\n}\n\nexport class Emitter<eventMap extends EventMap> {\n  _emitter = new EventEmitter()\n\n  constructor(public uid: string) {}\n\n  on<key extends EventKey<eventMap>>(\n    eventName: key,\n    fn: EventFn<\n      eventMap[key] extends [never]\n        ? [{ uid: string }]\n        : [data: eventMap[key] & { uid: string }]\n    >,\n  ) {\n    this._emitter.on(eventName, fn as EventFn)\n  }\n\n  once<key extends EventKey<eventMap>>(\n    eventName: key,\n    fn: EventFn<\n      eventMap[key] extends [never]\n        ? [{ uid: string }]\n        : [data: eventMap[key] & { uid: string }]\n    >,\n  ) {\n    this._emitter.once(eventName, fn as EventFn)\n  }\n\n  off<key extends EventKey<eventMap>>(\n    eventName: key,\n    fn: EventFn<\n      eventMap[key] extends [never]\n        ? [{ uid: string }]\n        : [data: eventMap[key] & { uid: string }]\n    >,\n  ) {\n    this._emitter.off(eventName, fn as EventFn)\n  }\n\n  emit<key extends EventKey<eventMap>>(\n    eventName: key,\n    ...params: eventMap[key] extends [never] ? [] : [data: eventMap[key]]\n  ) {\n    const data = params[0]\n    this._emitter.emit(eventName, { uid: this.uid, ...data })\n  }\n\n  listenerCount<key extends EventKey<eventMap>>(eventName: key) {\n    return this._emitter.listenerCount(eventName)\n  }\n}\n\nexport function createEmitter<eventMap extends EventMap>(uid: string) {\n  return new Emitter<eventMap>(uid)\n}\n"],"names":[],"mappings":";;;;;;;;AAcM,MAAO;IAGX,YAAmB,GAAW,CAAA;QAAlB,OAAA,cAAA,CAAA,IAAA,EAAA,OAAA;;;;mBAAO;;QAFnB,OAAA,cAAA,CAAA,IAAA,EAAA,YAAA;;;;mBAAW,IAAI,6KAAA,CAAA,eAAY;;IAEM;IAEjC,GACE,SAAc,EACd,EAIC,EAAA;QAED,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,WAAW;IAC9B;IAEA,KACE,SAAc,EACd,EAIC,EAAA;QAED,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,WAAW;IAChC;IAEA,IACE,SAAc,EACd,EAIC,EAAA;QAED,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,WAAW;IAC/B;IAEA,KACE,SAAc,EACd,GAAG,MAAkE,EAAA;QAErE,MAAM,OAAO,MAAM,CAAC,EAAE;QACtB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,WAAW;YAAE,KAAK,IAAI,CAAC,GAAG;YAAE,GAAG,IAAI;QAAA;IACxD;IAEA,cAA8C,SAAc,EAAA;QAC1D,OAAO,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC;IACrC;;AAGI,SAAU,cAAyC,GAAW;IAClE,OAAO,IAAI,QAAkB;AAC/B"}},
    {"offset": {"line": 2128, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2133, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@wagmi/core/src/utils/deserialize.ts"],"sourcesContent":["type Reviver = (key: string, value: any) => any\n\nexport function deserialize<type>(value: string, reviver?: Reviver): type {\n  return JSON.parse(value, (key, value_) => {\n    let value = value_\n    if (value?.__type === 'bigint') value = BigInt(value.value)\n    if (value?.__type === 'Map') value = new Map(value.value)\n    return reviver?.(key, value) ?? value\n  })\n}\n"],"names":[],"mappings":";;;AAEM,SAAU,YAAkB,KAAa,EAAE,OAAiB;IAChE,OAAO,KAAK,KAAK,CAAC,OAAO,CAAC,KAAK;QAC7B,IAAI,QAAQ;QACZ,IAAI,OAAO,WAAW,UAAU,QAAQ,OAAO,MAAM,KAAK;QAC1D,IAAI,OAAO,WAAW,OAAO,QAAQ,IAAI,IAAI,MAAM,KAAK;QACxD,OAAO,UAAU,KAAK,UAAU;IAClC;AACF"}},
    {"offset": {"line": 2144, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2149, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@wagmi/core/src/utils/serialize.ts"],"sourcesContent":["/**\n * Get the reference key for the circular value\n *\n * @param keys the keys to build the reference key from\n * @param cutoff the maximum number of keys to include\n * @returns the reference key\n */\nfunction getReferenceKey(keys: string[], cutoff: number) {\n  return keys.slice(0, cutoff).join('.') || '.'\n}\n\n/**\n * Faster `Array.prototype.indexOf` implementation build for slicing / splicing\n *\n * @param array the array to match the value in\n * @param value the value to match\n * @returns the matching index, or -1\n */\nfunction getCutoff(array: any[], value: any) {\n  const { length } = array\n\n  for (let index = 0; index < length; ++index) {\n    if (array[index] === value) {\n      return index + 1\n    }\n  }\n\n  return 0\n}\n\ntype StandardReplacer = (key: string, value: any) => any\ntype CircularReplacer = (key: string, value: any, referenceKey: string) => any\n\n/**\n * Create a replacer method that handles circular values\n *\n * @param [replacer] a custom replacer to use for non-circular values\n * @param [circularReplacer] a custom replacer to use for circular methods\n * @returns the value to stringify\n */\nfunction createReplacer(\n  replacer?: StandardReplacer | null | undefined,\n  circularReplacer?: CircularReplacer | null | undefined,\n): StandardReplacer {\n  const hasReplacer = typeof replacer === 'function'\n  const hasCircularReplacer = typeof circularReplacer === 'function'\n\n  const cache: any[] = []\n  const keys: string[] = []\n\n  return function replace(this: any, key: string, value: any) {\n    if (typeof value === 'object') {\n      if (cache.length) {\n        const thisCutoff = getCutoff(cache, this)\n\n        if (thisCutoff === 0) {\n          cache[cache.length] = this\n        } else {\n          cache.splice(thisCutoff)\n          keys.splice(thisCutoff)\n        }\n\n        keys[keys.length] = key\n\n        const valueCutoff = getCutoff(cache, value)\n\n        if (valueCutoff !== 0) {\n          return hasCircularReplacer\n            ? circularReplacer.call(\n                this,\n                key,\n                value,\n                getReferenceKey(keys, valueCutoff),\n              )\n            : `[ref=${getReferenceKey(keys, valueCutoff)}]`\n        }\n      } else {\n        cache[0] = value\n        keys[0] = key\n      }\n    }\n\n    return hasReplacer ? replacer.call(this, key, value) : value\n  }\n}\n\n/**\n * Stringifier that handles circular values\n *\n * Forked from https://github.com/planttheidea/fast-stringify\n *\n * @param value to stringify\n * @param [replacer] a custom replacer function for handling standard values\n * @param [indent] the number of spaces to indent the output by\n * @param [circularReplacer] a custom replacer function for handling circular values\n * @returns the stringified output\n */\nexport function serialize(\n  value: any,\n  replacer?: StandardReplacer | null | undefined,\n  indent?: number | null | undefined,\n  circularReplacer?: CircularReplacer | null | undefined,\n) {\n  return JSON.stringify(\n    value,\n    createReplacer((key, value_) => {\n      let value = value_\n      if (typeof value === 'bigint')\n        value = { __type: 'bigint', value: value_.toString() }\n      if (value instanceof Map)\n        value = { __type: 'Map', value: Array.from(value_.entries()) }\n      return replacer?.(key, value) ?? value\n    }, circularReplacer),\n    indent ?? undefined,\n  )\n}\n"],"names":[],"mappings":"AAAA;;;;;;;;;AAOA,SAAS,gBAAgB,IAAc,EAAE,MAAc;IACrD,OAAO,KAAK,KAAK,CAAC,GAAG,QAAQ,IAAI,CAAC,QAAQ;AAC5C;AAEA;;;;;;IAOA,SAAS,UAAU,KAAY,EAAE,KAAU;IACzC,MAAM,EAAE,MAAM,EAAE,GAAG;IAEnB,IAAK,IAAI,QAAQ,GAAG,QAAQ,QAAQ,EAAE,MAAO;QAC3C,IAAI,KAAK,CAAC,MAAM,KAAK,OAAO;YAC1B,OAAO,QAAQ;QACjB;IACF;IAEA,OAAO;AACT;AAKA;;;;;;IAOA,SAAS,eACP,QAA8C,EAC9C,gBAAsD;IAEtD,MAAM,cAAc,OAAO,aAAa;IACxC,MAAM,sBAAsB,OAAO,qBAAqB;IAExD,MAAM,QAAe,EAAE;IACvB,MAAM,OAAiB,EAAE;IAEzB,OAAO,SAAS,QAAmB,GAAW,EAAE,KAAU;QACxD,IAAI,OAAO,UAAU,UAAU;YAC7B,IAAI,MAAM,MAAM,EAAE;gBAChB,MAAM,aAAa,UAAU,OAAO,IAAI;gBAExC,IAAI,eAAe,GAAG;oBACpB,KAAK,CAAC,MAAM,MAAM,CAAC,GAAG,IAAI;gBAC5B,OAAO;oBACL,MAAM,MAAM,CAAC;oBACb,KAAK,MAAM,CAAC;gBACd;gBAEA,IAAI,CAAC,KAAK,MAAM,CAAC,GAAG;gBAEpB,MAAM,cAAc,UAAU,OAAO;gBAErC,IAAI,gBAAgB,GAAG;oBACrB,OAAO,sBACH,iBAAiB,IAAI,CACnB,IAAI,EACJ,KACA,OACA,gBAAgB,MAAM,gBAExB,CAAA,KAAA,EAAQ,gBAAgB,MAAM,aAAY,CAAA,CAAG;gBACnD;YACF,OAAO;gBACL,KAAK,CAAC,EAAE,GAAG;gBACX,IAAI,CAAC,EAAE,GAAG;YACZ;QACF;QAEA,OAAO,cAAc,SAAS,IAAI,CAAC,IAAI,EAAE,KAAK,SAAS;IACzD;AACF;AAaM,SAAU,UACd,KAAU,EACV,QAA8C,EAC9C,MAAkC,EAClC,gBAAsD;IAEtD,OAAO,KAAK,SAAS,CACnB,OACA,eAAe,CAAC,KAAK;QACnB,IAAI,QAAQ;QACZ,IAAI,OAAO,UAAU,UACnB,QAAQ;YAAE,QAAQ;YAAU,OAAO,OAAO,QAAQ;QAAE;QACtD,IAAI,iBAAiB,KACnB,QAAQ;YAAE,QAAQ;YAAO,OAAO,MAAM,IAAI,CAAC,OAAO,OAAO;QAAG;QAC9D,OAAO,WAAW,KAAK,UAAU;IACnC,GAAG,mBACH,UAAU;AAEd"}},
    {"offset": {"line": 2224, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2229, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@wagmi/core/src/createStorage.ts"],"sourcesContent":["import type { PartializedState } from './createConfig.js'\nimport type { Compute } from './types/utils.js'\nimport { deserialize as deserialize_ } from './utils/deserialize.js'\nimport { serialize as serialize_ } from './utils/serialize.js'\n\n// key-values for loose autocomplete and typing\nexport type StorageItemMap = {\n  recentConnectorId: string\n  state: PartializedState\n}\n\nexport type Storage<\n  itemMap extends Record<string, unknown> = Record<string, unknown>,\n  ///\n  storageItemMap extends StorageItemMap = StorageItemMap & itemMap,\n> = {\n  key: string\n  getItem<\n    key extends keyof storageItemMap,\n    value extends storageItemMap[key],\n    defaultValue extends value | null | undefined,\n  >(\n    key: key,\n    defaultValue?: defaultValue | undefined,\n  ):\n    | (defaultValue extends null ? value | null : value)\n    | Promise<defaultValue extends null ? value | null : value>\n  setItem<\n    key extends keyof storageItemMap,\n    value extends storageItemMap[key] | null,\n  >(key: key, value: value): void | Promise<void>\n  removeItem(key: keyof storageItemMap): void | Promise<void>\n}\n\nexport type BaseStorage = {\n  getItem(\n    key: string,\n  ): string | null | undefined | Promise<string | null | undefined>\n  setItem(key: string, value: string): void | Promise<void>\n  removeItem(key: string): void | Promise<void>\n}\n\nexport type CreateStorageParameters = {\n  deserialize?: (<type>(value: string) => type | unknown) | undefined\n  key?: string | undefined\n  serialize?: (<type>(value: type | any) => string) | undefined\n  storage?: Compute<BaseStorage> | undefined\n}\n\nexport function createStorage<\n  itemMap extends Record<string, unknown> = Record<string, unknown>,\n  storageItemMap extends StorageItemMap = StorageItemMap & itemMap,\n>(parameters: CreateStorageParameters): Compute<Storage<storageItemMap>> {\n  const {\n    deserialize = deserialize_,\n    key: prefix = 'wagmi',\n    serialize = serialize_,\n    storage = noopStorage,\n  } = parameters\n\n  function unwrap<type>(value: type): type | Promise<type> {\n    if (value instanceof Promise) return value.then((x) => x).catch(() => null)\n    return value\n  }\n\n  return {\n    ...storage,\n    key: prefix,\n    async getItem(key, defaultValue) {\n      const value = storage.getItem(`${prefix}.${key as string}`)\n      const unwrapped = await unwrap(value)\n      if (unwrapped) return deserialize(unwrapped) ?? null\n      return (defaultValue ?? null) as any\n    },\n    async setItem(key, value) {\n      const storageKey = `${prefix}.${key as string}`\n      if (value === null) await unwrap(storage.removeItem(storageKey))\n      else await unwrap(storage.setItem(storageKey, serialize(value)))\n    },\n    async removeItem(key) {\n      await unwrap(storage.removeItem(`${prefix}.${key as string}`))\n    },\n  }\n}\n\nexport const noopStorage = {\n  getItem: () => null,\n  setItem: () => {},\n  removeItem: () => {},\n} satisfies BaseStorage\n"],"names":[],"mappings":";;;;;;;;;AAiDM,SAAU,cAGd,UAAmC;IACnC,MAAM,EACJ,cAAc,kKAAA,CAAA,cAAY,EAC1B,KAAK,SAAS,OAAO,EACrB,YAAY,gKAAA,CAAA,YAAU,EACtB,UAAU,WAAW,EACtB,GAAG;IAEJ,SAAS,OAAa,KAAW;QAC/B,IAAI,iBAAiB,SAAS,OAAO,MAAM,IAAI,CAAC,CAAC,IAAM,GAAG,KAAK,CAAC,IAAM;QACtE,OAAO;IACT;IAEA,OAAO;QACL,GAAG,OAAO;QACV,KAAK;QACL,MAAM,SAAQ,GAAG,EAAE,YAAY;YAC7B,MAAM,QAAQ,QAAQ,OAAO,CAAC,CAAA,EAAG,OAAM,CAAA,EAAI,IAAa,CAAE;YAC1D,MAAM,YAAY,MAAM,OAAO;YAC/B,IAAI,WAAW,OAAO,YAAY,cAAc;YAChD,OAAQ,gBAAgB;QAC1B;QACA,MAAM,SAAQ,GAAG,EAAE,KAAK;YACtB,MAAM,aAAa,CAAA,EAAG,OAAM,CAAA,EAAI,IAAa,CAAE;YAC/C,IAAI,UAAU,MAAM,MAAM,OAAO,QAAQ,UAAU,CAAC;iBAC/C,MAAM,OAAO,QAAQ,OAAO,CAAC,YAAY,UAAU;QAC1D;QACA,MAAM,YAAW,GAAG;YAClB,MAAM,OAAO,QAAQ,UAAU,CAAC,CAAA,EAAG,OAAM,CAAA,EAAI,IAAa,CAAE;QAC9D;;AAEJ;AAEO,MAAM,cAAc;IACzB,SAAS,IAAM;IACf,SAAS,KAAO;IAChB,YAAY,KAAO"}},
    {"offset": {"line": 2268, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2273, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@wagmi/core/src/utils/uid.ts"],"sourcesContent":["const size = 256\nlet index = size\nlet buffer: string\n\nexport function uid(length = 11) {\n  if (!buffer || index + length > size * 2) {\n    buffer = ''\n    index = 0\n    for (let i = 0; i < size; i++) {\n      buffer += ((256 + Math.random() * 256) | 0).toString(16).substring(1)\n    }\n  }\n  return buffer.substring(index, index++ + length)\n}\n"],"names":[],"mappings":";;;AAAA,MAAM,OAAO;AACb,IAAI,QAAQ;AACZ,IAAI;AAEE,SAAU,IAAI,SAAS,EAAE;IAC7B,IAAI,CAAC,UAAU,QAAQ,SAAS,OAAO,GAAG;QACxC,SAAS;QACT,QAAQ;QACR,IAAK,IAAI,IAAI,GAAG,IAAI,MAAM,IAAK;YAC7B,UAAU,CAAC,AAAC,MAAM,KAAK,MAAM,KAAK,MAAO,CAAC,EAAE,QAAQ,CAAC,IAAI,SAAS,CAAC;QACrE;IACF;IACA,OAAO,OAAO,SAAS,CAAC,OAAO,UAAU;AAC3C"}},
    {"offset": {"line": 2289, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2294, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@wagmi/core/src/createConfig.ts"],"sourcesContent":["import {\n  type EIP6963ProviderDetail,\n  type Store as MipdStore,\n  createStore as createMipd,\n} from 'mipd'\nimport {\n  type Address,\n  type Chain,\n  type Client,\n  type EIP1193RequestFn,\n  createClient,\n  type ClientConfig as viem_ClientConfig,\n  type Transport as viem_Transport,\n} from 'viem'\nimport { persist, subscribeWithSelector } from 'zustand/middleware'\nimport { type Mutate, type StoreApi, createStore } from 'zustand/vanilla'\n\nimport type {\n  ConnectorEventMap,\n  CreateConnectorFn,\n} from './connectors/createConnector.js'\nimport { injected } from './connectors/injected.js'\nimport { type Emitter, type EventData, createEmitter } from './createEmitter.js'\nimport { type Storage, createStorage, noopStorage } from './createStorage.js'\nimport { ChainNotConfiguredError } from './errors/config.js'\nimport type {\n  Compute,\n  ExactPartial,\n  LooseOmit,\n  OneOf,\n  RemoveUndefined,\n} from './types/utils.js'\nimport { uid } from './utils/uid.js'\nimport { version } from './version.js'\n\nexport type CreateConfigParameters<\n  chains extends readonly [Chain, ...Chain[]] = readonly [Chain, ...Chain[]],\n  transports extends Record<chains[number]['id'], Transport> = Record<\n    chains[number]['id'],\n    Transport\n  >,\n> = Compute<\n  {\n    chains: chains\n    connectors?: CreateConnectorFn[] | undefined\n    multiInjectedProviderDiscovery?: boolean | undefined\n    storage?: Storage | null | undefined\n    ssr?: boolean | undefined\n    syncConnectedChain?: boolean | undefined\n  } & OneOf<\n    | ({ transports: transports } & {\n        [key in keyof ClientConfig]?:\n          | ClientConfig[key]\n          | { [_ in chains[number]['id']]?: ClientConfig[key] | undefined }\n          | undefined\n      })\n    | {\n        client(parameters: { chain: chains[number] }): Client<\n          transports[chains[number]['id']],\n          chains[number]\n        >\n      }\n  >\n>\n\nexport function createConfig<\n  const chains extends readonly [Chain, ...Chain[]],\n  transports extends Record<chains[number]['id'], Transport>,\n>(\n  parameters: CreateConfigParameters<chains, transports>,\n): Config<chains, transports> {\n  const {\n    multiInjectedProviderDiscovery = true,\n    storage = createStorage({\n      storage:\n        typeof window !== 'undefined' && window.localStorage\n          ? window.localStorage\n          : noopStorage,\n    }),\n    syncConnectedChain = true,\n    ssr = false,\n    ...rest\n  } = parameters\n\n  /////////////////////////////////////////////////////////////////////////////////////////////////\n  // Set up connectors, clients, etc.\n  /////////////////////////////////////////////////////////////////////////////////////////////////\n\n  const mipd =\n    typeof window !== 'undefined' && multiInjectedProviderDiscovery\n      ? createMipd()\n      : undefined\n\n  const chains = createStore(() => rest.chains)\n  const connectors = createStore(() => {\n    const collection = []\n    const rdnsSet = new Set<string>()\n    for (const connectorFns of rest.connectors ?? []) {\n      const connector = setup(connectorFns)\n      collection.push(connector)\n      if (!ssr && connector.rdns) rdnsSet.add(connector.rdns)\n    }\n    if (!ssr && mipd) {\n      const providers = mipd.getProviders()\n      for (const provider of providers) {\n        if (rdnsSet.has(provider.info.rdns)) continue\n        collection.push(setup(providerDetailToConnector(provider)))\n      }\n    }\n    return collection\n  })\n  function setup(connectorFn: CreateConnectorFn): Connector {\n    // Set up emitter with uid and add to connector so they are \"linked\" together.\n    const emitter = createEmitter<ConnectorEventMap>(uid())\n    const connector = {\n      ...connectorFn({\n        emitter,\n        chains: chains.getState(),\n        storage,\n        transports: rest.transports,\n      }),\n      emitter,\n      uid: emitter.uid,\n    }\n\n    // Start listening for `connect` events on connector setup\n    // This allows connectors to \"connect\" themselves without user interaction (e.g. MetaMask's \"Manually connect to current site\")\n    emitter.on('connect', connect)\n    connector.setup?.()\n\n    return connector\n  }\n  function providerDetailToConnector(providerDetail: EIP6963ProviderDetail) {\n    const { info } = providerDetail\n    const provider = providerDetail.provider as any\n    return injected({ target: { ...info, id: info.rdns, provider } })\n  }\n\n  const clients = new Map<number, Client<Transport, chains[number]>>()\n  function getClient<chainId extends chains[number]['id']>(\n    config: { chainId?: chainId | chains[number]['id'] | undefined } = {},\n  ): Client<Transport, Extract<chains[number], { id: chainId }>> {\n    const chainId = config.chainId ?? store.getState().chainId\n    const chain = chains.getState().find((x) => x.id === chainId)\n\n    // chainId specified and not configured\n    if (config.chainId && !chain) throw new ChainNotConfiguredError()\n\n    // If the target chain is not configured, use the client of the current chain.\n    type Return = Client<Transport, Extract<chains[number], { id: chainId }>>\n    {\n      const client = clients.get(store.getState().chainId)\n      if (client && !chain) return client as Return\n      if (!chain) throw new ChainNotConfiguredError()\n    }\n\n    // If a memoized client exists for a chain id, use that.\n    {\n      const client = clients.get(chainId)\n      if (client) return client as Return\n    }\n\n    let client: Client<Transport, chains[number]>\n    if (rest.client) client = rest.client({ chain })\n    else {\n      const chainId = chain.id as chains[number]['id']\n      const chainIds = chains.getState().map((x) => x.id)\n      // Grab all properties off `rest` and resolve for use in `createClient`\n      const properties: Partial<viem_ClientConfig> = {}\n      const entries = Object.entries(rest) as [keyof typeof rest, any][]\n\n      for (const [key, value] of entries) {\n        if (\n          key === 'chains' ||\n          key === 'client' ||\n          key === 'connectors' ||\n          key === 'transports'\n        )\n          continue\n\n        if (typeof value === 'object') {\n          // check if value is chainId-specific since some values can be objects\n          // e.g. { batch: { multicall: { batchSize: 1024 } } }\n          if (chainId in value) properties[key] = value[chainId]\n          else {\n            // check if value is chainId-specific, but does not have value for current chainId\n            const hasChainSpecificValue = chainIds.some((x) => x in value)\n            if (hasChainSpecificValue) continue\n            properties[key] = value\n          }\n        } else properties[key] = value\n      }\n\n      client = createClient({\n        ...properties,\n        chain,\n        batch: properties.batch ?? { multicall: true },\n        transport: (parameters) =>\n          rest.transports[chainId]({ ...parameters, connectors }),\n      })\n    }\n\n    clients.set(chainId, client)\n    return client as Return\n  }\n\n  /////////////////////////////////////////////////////////////////////////////////////////////////\n  // Create store\n  /////////////////////////////////////////////////////////////////////////////////////////////////\n\n  function getInitialState(): State {\n    return {\n      chainId: chains.getState()[0].id,\n      connections: new Map<string, Connection>(),\n      current: null,\n      status: 'disconnected',\n    }\n  }\n\n  let currentVersion: number\n  const prefix = '0.0.0-canary-'\n  if (version.startsWith(prefix))\n    currentVersion = Number.parseInt(version.replace(prefix, ''))\n  // use package major version to version store\n  else currentVersion = Number.parseInt(version.split('.')[0] ?? '0')\n\n  const store = createStore(\n    subscribeWithSelector(\n      // only use persist middleware if storage exists\n      storage\n        ? persist(getInitialState, {\n            migrate(persistedState, version) {\n              if (version === currentVersion) return persistedState as State\n\n              const initialState = getInitialState()\n              const chainId = validatePersistedChainId(\n                persistedState,\n                initialState.chainId,\n              )\n              return { ...initialState, chainId }\n            },\n            name: 'store',\n            partialize(state) {\n              // Only persist \"critical\" store properties to preserve storage size.\n              return {\n                connections: {\n                  __type: 'Map',\n                  value: Array.from(state.connections.entries()).map(\n                    ([key, connection]) => {\n                      const { id, name, type, uid } = connection.connector\n                      const connector = { id, name, type, uid }\n                      return [key, { ...connection, connector }]\n                    },\n                  ),\n                } as unknown as PartializedState['connections'],\n                chainId: state.chainId,\n                current: state.current,\n              } satisfies PartializedState\n            },\n            merge(persistedState, currentState) {\n              // `status` should not be persisted as it messes with reconnection\n              if (\n                typeof persistedState === 'object' &&\n                persistedState &&\n                'status' in persistedState\n              )\n                delete persistedState.status\n              // Make sure persisted `chainId` is valid\n              const chainId = validatePersistedChainId(\n                persistedState,\n                currentState.chainId,\n              )\n              return {\n                ...currentState,\n                ...(persistedState as object),\n                chainId,\n              }\n            },\n            skipHydration: ssr,\n            storage: storage as Storage<Record<string, unknown>>,\n            version: currentVersion,\n          })\n        : getInitialState,\n    ),\n  )\n  store.setState(getInitialState())\n\n  function validatePersistedChainId(\n    persistedState: unknown,\n    defaultChainId: number,\n  ) {\n    return persistedState &&\n      typeof persistedState === 'object' &&\n      'chainId' in persistedState &&\n      typeof persistedState.chainId === 'number' &&\n      chains.getState().some((x) => x.id === persistedState.chainId)\n      ? persistedState.chainId\n      : defaultChainId\n  }\n\n  /////////////////////////////////////////////////////////////////////////////////////////////////\n  // Subscribe to changes\n  /////////////////////////////////////////////////////////////////////////////////////////////////\n\n  // Update default chain when connector chain changes\n  if (syncConnectedChain)\n    store.subscribe(\n      ({ connections, current }) =>\n        current ? connections.get(current)?.chainId : undefined,\n      (chainId) => {\n        // If chain is not configured, then don't switch over to it.\n        const isChainConfigured = chains\n          .getState()\n          .some((x) => x.id === chainId)\n        if (!isChainConfigured) return\n\n        return store.setState((x) => ({\n          ...x,\n          chainId: chainId ?? x.chainId,\n        }))\n      },\n    )\n\n  // EIP-6963 subscribe for new wallet providers\n  mipd?.subscribe((providerDetails) => {\n    const connectorIdSet = new Set()\n    const connectorRdnsSet = new Set()\n    for (const connector of connectors.getState()) {\n      connectorIdSet.add(connector.id)\n      if (connector.rdns) connectorRdnsSet.add(connector.rdns)\n    }\n\n    const newConnectors: Connector[] = []\n    for (const providerDetail of providerDetails) {\n      if (connectorRdnsSet.has(providerDetail.info.rdns)) continue\n      const connector = setup(providerDetailToConnector(providerDetail))\n      if (connectorIdSet.has(connector.id)) continue\n      newConnectors.push(connector)\n    }\n\n    if (storage && !store.persist.hasHydrated()) return\n    connectors.setState((x) => [...x, ...newConnectors], true)\n  })\n\n  /////////////////////////////////////////////////////////////////////////////////////////////////\n  // Emitter listeners\n  /////////////////////////////////////////////////////////////////////////////////////////////////\n\n  function change(data: EventData<ConnectorEventMap, 'change'>) {\n    store.setState((x) => {\n      const connection = x.connections.get(data.uid)\n      if (!connection) return x\n      return {\n        ...x,\n        connections: new Map(x.connections).set(data.uid, {\n          accounts:\n            (data.accounts as readonly [Address, ...Address[]]) ??\n            connection.accounts,\n          chainId: data.chainId ?? connection.chainId,\n          connector: connection.connector,\n        }),\n      }\n    })\n  }\n  function connect(data: EventData<ConnectorEventMap, 'connect'>) {\n    // Disable handling if reconnecting/connecting\n    if (\n      store.getState().status === 'connecting' ||\n      store.getState().status === 'reconnecting'\n    )\n      return\n\n    store.setState((x) => {\n      const connector = connectors.getState().find((x) => x.uid === data.uid)\n      if (!connector) return x\n\n      if (connector.emitter.listenerCount('connect'))\n        connector.emitter.off('connect', change)\n      if (!connector.emitter.listenerCount('change'))\n        connector.emitter.on('change', change)\n      if (!connector.emitter.listenerCount('disconnect'))\n        connector.emitter.on('disconnect', disconnect)\n\n      return {\n        ...x,\n        connections: new Map(x.connections).set(data.uid, {\n          accounts: data.accounts as readonly [Address, ...Address[]],\n          chainId: data.chainId,\n          connector: connector,\n        }),\n        current: data.uid,\n        status: 'connected',\n      }\n    })\n  }\n  function disconnect(data: EventData<ConnectorEventMap, 'disconnect'>) {\n    store.setState((x) => {\n      const connection = x.connections.get(data.uid)\n      if (connection) {\n        const connector = connection.connector\n        if (connector.emitter.listenerCount('change'))\n          connection.connector.emitter.off('change', change)\n        if (connector.emitter.listenerCount('disconnect'))\n          connection.connector.emitter.off('disconnect', disconnect)\n        if (!connector.emitter.listenerCount('connect'))\n          connection.connector.emitter.on('connect', connect)\n      }\n\n      x.connections.delete(data.uid)\n\n      if (x.connections.size === 0)\n        return {\n          ...x,\n          connections: new Map(),\n          current: null,\n          status: 'disconnected',\n        }\n\n      const nextConnection = x.connections.values().next().value as Connection\n      return {\n        ...x,\n        connections: new Map(x.connections),\n        current: nextConnection.connector.uid,\n      }\n    })\n  }\n\n  return {\n    get chains() {\n      return chains.getState() as chains\n    },\n    get connectors() {\n      return connectors.getState()\n    },\n    storage,\n\n    getClient,\n    get state() {\n      return store.getState() as unknown as State<chains>\n    },\n    setState(value) {\n      let newState: State\n      if (typeof value === 'function') newState = value(store.getState() as any)\n      else newState = value\n\n      // Reset state if it got set to something not matching the base state\n      const initialState = getInitialState()\n      if (typeof newState !== 'object') newState = initialState\n      const isCorrupt = Object.keys(initialState).some((x) => !(x in newState))\n      if (isCorrupt) newState = initialState\n\n      store.setState(newState, true)\n    },\n    subscribe(selector, listener, options) {\n      return store.subscribe(\n        selector as unknown as (state: State) => any,\n        listener,\n        options\n          ? ({\n              ...options,\n              fireImmediately: options.emitImmediately,\n              // Workaround cast since Zustand does not support `'exactOptionalPropertyTypes'`\n            } as RemoveUndefined<typeof options>)\n          : undefined,\n      )\n    },\n\n    _internal: {\n      mipd,\n      store,\n      ssr: Boolean(ssr),\n      syncConnectedChain,\n      transports: rest.transports as transports,\n      chains: {\n        setState(value) {\n          const nextChains = (\n            typeof value === 'function' ? value(chains.getState()) : value\n          ) as chains\n          if (nextChains.length === 0) return\n          return chains.setState(nextChains, true)\n        },\n        subscribe(listener) {\n          return chains.subscribe(listener)\n        },\n      },\n      connectors: {\n        providerDetailToConnector,\n        setup,\n        setState(value) {\n          return connectors.setState(\n            typeof value === 'function' ? value(connectors.getState()) : value,\n            true,\n          )\n        },\n        subscribe(listener) {\n          return connectors.subscribe(listener)\n        },\n      },\n      events: { change, connect, disconnect },\n    },\n  }\n}\n\n/////////////////////////////////////////////////////////////////////////////////////////////////\n// Types\n/////////////////////////////////////////////////////////////////////////////////////////////////\n\nexport type Config<\n  chains extends readonly [Chain, ...Chain[]] = readonly [Chain, ...Chain[]],\n  transports extends Record<chains[number]['id'], Transport> = Record<\n    chains[number]['id'],\n    Transport\n  >,\n> = {\n  readonly chains: chains\n  readonly connectors: readonly Connector[]\n  readonly storage: Storage | null\n\n  readonly state: State<chains>\n  setState<tchains extends readonly [Chain, ...Chain[]] = chains>(\n    value: State<tchains> | ((state: State<tchains>) => State<tchains>),\n  ): void\n  subscribe<state>(\n    selector: (state: State<chains>) => state,\n    listener: (state: state, previousState: state) => void,\n    options?:\n      | {\n          emitImmediately?: boolean | undefined\n          equalityFn?: ((a: state, b: state) => boolean) | undefined\n        }\n      | undefined,\n  ): () => void\n\n  getClient<chainId extends chains[number]['id']>(parameters?: {\n    chainId?: chainId | chains[number]['id'] | undefined\n  }): Client<transports[chainId], Extract<chains[number], { id: chainId }>>\n\n  /**\n   * Not part of versioned API, proceed with caution.\n   * @internal\n   */\n  _internal: Internal<chains, transports>\n}\n\ntype Internal<\n  chains extends readonly [Chain, ...Chain[]] = readonly [Chain, ...Chain[]],\n  transports extends Record<chains[number]['id'], Transport> = Record<\n    chains[number]['id'],\n    Transport\n  >,\n> = {\n  readonly mipd: MipdStore | undefined\n  readonly store: Mutate<StoreApi<any>, [['zustand/persist', any]]>\n  readonly ssr: boolean\n  readonly syncConnectedChain: boolean\n  readonly transports: transports\n\n  chains: {\n    setState(\n      value:\n        | readonly [Chain, ...Chain[]]\n        | ((\n            state: readonly [Chain, ...Chain[]],\n          ) => readonly [Chain, ...Chain[]]),\n    ): void\n    subscribe(\n      listener: (\n        state: readonly [Chain, ...Chain[]],\n        prevState: readonly [Chain, ...Chain[]],\n      ) => void,\n    ): () => void\n  }\n  connectors: {\n    providerDetailToConnector(\n      providerDetail: EIP6963ProviderDetail,\n    ): CreateConnectorFn\n    setup(connectorFn: CreateConnectorFn): Connector\n    setState(value: Connector[] | ((state: Connector[]) => Connector[])): void\n    subscribe(\n      listener: (state: Connector[], prevState: Connector[]) => void,\n    ): () => void\n  }\n  events: {\n    change(data: EventData<ConnectorEventMap, 'change'>): void\n    connect(data: EventData<ConnectorEventMap, 'connect'>): void\n    disconnect(data: EventData<ConnectorEventMap, 'disconnect'>): void\n  }\n}\n\nexport type State<\n  chains extends readonly [Chain, ...Chain[]] = readonly [Chain, ...Chain[]],\n> = {\n  chainId: chains[number]['id']\n  connections: Map<string, Connection>\n  current: string | null\n  status: 'connected' | 'connecting' | 'disconnected' | 'reconnecting'\n}\n\nexport type PartializedState = Compute<\n  ExactPartial<Pick<State, 'chainId' | 'connections' | 'current' | 'status'>>\n>\n\nexport type Connection = {\n  accounts: readonly [Address, ...Address[]]\n  chainId: number\n  connector: Connector\n}\n\nexport type Connector = ReturnType<CreateConnectorFn> & {\n  emitter: Emitter<ConnectorEventMap>\n  uid: string\n}\n\nexport type Transport<\n  type extends string = string,\n  rpcAttributes = Record<string, any>,\n  eip1193RequestFn extends EIP1193RequestFn = EIP1193RequestFn,\n> = (\n  params: Parameters<\n    viem_Transport<type, rpcAttributes, eip1193RequestFn>\n  >[0] & {\n    connectors?: StoreApi<Connector[]> | undefined\n  },\n) => ReturnType<viem_Transport<type, rpcAttributes, eip1193RequestFn>>\n\ntype ClientConfig = LooseOmit<\n  viem_ClientConfig,\n  'account' | 'chain' | 'key' | 'name' | 'transport' | 'type'\n>\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 2660, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2665, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@wagmi/core/src/query/readContract.ts"],"sourcesContent":["import type { QueryOptions } from '@tanstack/query-core'\nimport type { Abi, ContractFunctionArgs, ContractFunctionName } from 'viem'\n\nimport {\n  type ReadContractErrorType,\n  type ReadContractParameters,\n  type ReadContractReturnType,\n  readContract,\n} from '../actions/readContract.js'\nimport type { Config } from '../createConfig.js'\nimport type { ScopeKeyParameter } from '../types/properties.js'\nimport type { UnionExactPartial } from '../types/utils.js'\nimport { filterQueryOptions } from './utils.js'\n\nexport type ReadContractOptions<\n  abi extends Abi | readonly unknown[],\n  functionName extends ContractFunctionName<abi, 'pure' | 'view'>,\n  args extends ContractFunctionArgs<abi, 'pure' | 'view', functionName>,\n  config extends Config,\n> = UnionExactPartial<ReadContractParameters<abi, functionName, args, config>> &\n  ScopeKeyParameter\n\nexport function readContractQueryOptions<\n  config extends Config,\n  const abi extends Abi | readonly unknown[],\n  functionName extends ContractFunctionName<abi, 'pure' | 'view'>,\n  args extends ContractFunctionArgs<abi, 'pure' | 'view', functionName>,\n>(\n  config: config,\n  options: ReadContractOptions<abi, functionName, args, config> = {} as any,\n) {\n  return {\n    // TODO: Support `signal` once Viem actions allow passthrough\n    // https://tkdodo.eu/blog/why-you-want-react-query#bonus-cancellation\n    async queryFn({ queryKey }) {\n      const abi = options.abi as Abi\n      if (!abi) throw new Error('abi is required')\n\n      const { functionName, scopeKey: _, ...parameters } = queryKey[1]\n      const addressOrCodeParams = (() => {\n        const params = queryKey[1] as unknown as ReadContractParameters\n        if (params.address) return { address: params.address }\n        if (params.code) return { code: params.code }\n        throw new Error('address or code is required')\n      })()\n\n      if (!functionName) throw new Error('functionName is required')\n\n      return readContract(config, {\n        abi,\n        functionName,\n        args: parameters.args as readonly unknown[],\n        ...addressOrCodeParams,\n        ...parameters,\n      }) as Promise<ReadContractData<abi, functionName, args>>\n    },\n    queryKey: readContractQueryKey(options as any) as any,\n  } as const satisfies QueryOptions<\n    ReadContractQueryFnData<abi, functionName, args>,\n    ReadContractErrorType,\n    ReadContractData<abi, functionName, args>,\n    ReadContractQueryKey<abi, functionName, args, config>\n  >\n}\n\nexport type ReadContractQueryFnData<\n  abi extends Abi | readonly unknown[],\n  functionName extends ContractFunctionName<abi, 'pure' | 'view'>,\n  args extends ContractFunctionArgs<abi, 'pure' | 'view', functionName>,\n> = ReadContractReturnType<abi, functionName, args>\n\nexport type ReadContractData<\n  abi extends Abi | readonly unknown[],\n  functionName extends ContractFunctionName<abi, 'pure' | 'view'>,\n  args extends ContractFunctionArgs<abi, 'pure' | 'view', functionName>,\n> = ReadContractQueryFnData<abi, functionName, args>\n\nexport function readContractQueryKey<\n  config extends Config,\n  const abi extends Abi | readonly unknown[],\n  functionName extends ContractFunctionName<abi, 'pure' | 'view'>,\n  args extends ContractFunctionArgs<abi, 'pure' | 'view', functionName>,\n>(options: ReadContractOptions<abi, functionName, args, config> = {} as any) {\n  const { abi: _, ...rest } = options\n  return ['readContract', filterQueryOptions(rest)] as const\n}\n\nexport type ReadContractQueryKey<\n  abi extends Abi | readonly unknown[],\n  functionName extends ContractFunctionName<abi, 'pure' | 'view'>,\n  args extends ContractFunctionArgs<abi, 'pure' | 'view', functionName>,\n  config extends Config,\n> = ReturnType<typeof readContractQueryKey<config, abi, functionName, args>>\n"],"names":[],"mappings":";;;;;;;;;AAsBM,SAAU,yBAMd,MAAc,EACd,UAAgE,CAAA,CAAS;IAEzE,OAAO;QACL,6DAA6D;QAC7D,qEAAqE;QACrE,MAAM,SAAQ,EAAE,QAAQ,EAAE;YACxB,MAAM,MAAM,QAAQ,GAAU;YAC9B,IAAI,CAAC,KAAK,MAAM,IAAI,MAAM;YAE1B,MAAM,EAAE,YAAY,EAAE,UAAU,CAAC,EAAE,GAAG,YAAY,GAAG,QAAQ,CAAC,EAAE;YAChE,MAAM,sBAAsB,CAAC;gBAC3B,MAAM,SAAS,QAAQ,CAAC,EAAuC;gBAC/D,IAAI,OAAO,OAAO,EAAE,OAAO;oBAAE,SAAS,OAAO,OAAO;gBAAA;gBACpD,IAAI,OAAO,IAAI,EAAE,OAAO;oBAAE,MAAM,OAAO,IAAI;gBAAA;gBAC3C,MAAM,IAAI,MAAM;YAClB,CAAC;YAED,IAAI,CAAC,cAAc,MAAM,IAAI,MAAM;YAEnC,OAAO,CAAA,GAAA,qKAAA,CAAA,eAAY,AAAZ,EAAa,QAAQ;gBAC1B;gBACA;gBACA,MAAM,WAAW,IAA0B;gBAC3C,GAAG,mBAAmB;gBACtB,GAAG,UAAU;;QAEjB;QACA,UAAU,qBAAqB;;AAOnC;AAcM,SAAU,qBAKd,UAAgE,CAAA,CAAS;IACzE,MAAM,EAAE,KAAK,CAAC,EAAE,GAAG,MAAM,GAAG;IAC5B,OAAO;QAAC;QAAgB,CAAA,GAAA,4JAAA,CAAA,qBAAkB,AAAlB,EAAmB;KAAe;AAC5D"}},
    {"offset": {"line": 2711, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2716, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@wagmi/core/src/actions/simulateContract.ts"],"sourcesContent":["import type {\n  Abi,\n  Account,\n  Address,\n  Chain,\n  ContractFunctionArgs,\n  ContractFunctionName,\n} from 'viem'\nimport {\n  type SimulateContractErrorType as viem_SimulateContractErrorType,\n  type SimulateContractParameters as viem_SimulateContractParameters,\n  type SimulateContractReturnType as viem_SimulateContractReturnType,\n  simulateContract as viem_simulateContract,\n} from 'viem/actions'\n\nimport type { Config } from '../createConfig.js'\nimport type { BaseErrorType, ErrorType } from '../errors/base.js'\nimport type { SelectChains } from '../types/chain.js'\nimport type {\n  ChainIdParameter,\n  ConnectorParameter,\n} from '../types/properties.js'\nimport type {\n  Compute,\n  PartialBy,\n  UnionCompute,\n  UnionStrictOmit,\n} from '../types/utils.js'\nimport { getAction } from '../utils/getAction.js'\nimport {\n  type GetConnectorClientErrorType,\n  getConnectorClient,\n} from './getConnectorClient.js'\n\nexport type SimulateContractParameters<\n  abi extends Abi | readonly unknown[] = Abi,\n  functionName extends ContractFunctionName<\n    abi,\n    'nonpayable' | 'payable'\n  > = ContractFunctionName<abi, 'nonpayable' | 'payable'>,\n  args extends ContractFunctionArgs<\n    abi,\n    'nonpayable' | 'payable',\n    functionName\n  > = ContractFunctionArgs<abi, 'nonpayable' | 'payable', functionName>,\n  config extends Config = Config,\n  chainId extends\n    | config['chains'][number]['id']\n    | undefined = config['chains'][number]['id'],\n  ///\n  chains extends readonly Chain[] = SelectChains<config, chainId>,\n> = {\n  [key in keyof chains]: UnionCompute<\n    UnionStrictOmit<\n      viem_SimulateContractParameters<\n        abi,\n        functionName,\n        args,\n        chains[key],\n        chains[key],\n        Account | Address\n      >,\n      'chain'\n    >\n  > &\n    ChainIdParameter<config, chainId> &\n    ConnectorParameter\n}[number]\n\nexport type SimulateContractReturnType<\n  abi extends Abi | readonly unknown[] = Abi,\n  functionName extends ContractFunctionName<\n    abi,\n    'nonpayable' | 'payable'\n  > = ContractFunctionName<abi, 'nonpayable' | 'payable'>,\n  args extends ContractFunctionArgs<\n    abi,\n    'nonpayable' | 'payable',\n    functionName\n  > = ContractFunctionArgs<abi, 'nonpayable' | 'payable', functionName>,\n  config extends Config = Config,\n  chainId extends\n    | config['chains'][number]['id']\n    | undefined = config['chains'][number]['id'],\n  ///\n  chains extends readonly Chain[] = SelectChains<config, chainId>,\n> = {\n  [key in keyof chains]: viem_SimulateContractReturnType<\n    abi,\n    functionName,\n    args,\n    chains[key],\n    Account,\n    chains[key]\n  > & {\n    chainId: chains[key]['id']\n    request: Compute<\n      PartialBy<\n        { __mode: 'prepared'; chainId: chainId; chain: chains[key] },\n        chainId extends config['chains'][number]['id'] ? never : 'chainId'\n      >\n    >\n  }\n}[number]\n\nexport type SimulateContractErrorType =\n  // getConnectorClient()\n  | GetConnectorClientErrorType\n  // base\n  | BaseErrorType\n  | ErrorType\n  // viem\n  | viem_SimulateContractErrorType\n\n/** https://wagmi.sh/core/api/actions/simulateContract */\nexport async function simulateContract<\n  config extends Config,\n  const abi extends Abi | readonly unknown[],\n  functionName extends ContractFunctionName<abi, 'nonpayable' | 'payable'>,\n  args extends ContractFunctionArgs<\n    abi,\n    'nonpayable' | 'payable',\n    functionName\n  >,\n  chainId extends config['chains'][number]['id'] | undefined = undefined,\n>(\n  config: config,\n  parameters: SimulateContractParameters<\n    abi,\n    functionName,\n    args,\n    config,\n    chainId\n  >,\n): Promise<\n  SimulateContractReturnType<abi, functionName, args, config, chainId>\n> {\n  const { abi, chainId, connector, ...rest } =\n    parameters as SimulateContractParameters\n\n  let account: Address | Account\n  if (parameters.account) account = parameters.account\n  else {\n    const connectorClient = await getConnectorClient(config, {\n      chainId,\n      connector,\n    })\n    account = connectorClient.account\n  }\n\n  const client = config.getClient({ chainId })\n  const action = getAction(client, viem_simulateContract, 'simulateContract')\n  const { result, request } = await action({ ...rest, abi, account })\n\n  return {\n    chainId: client.chain.id,\n    result,\n    request: { __mode: 'prepared', ...request, chainId },\n  } as unknown as SimulateContractReturnType<\n    abi,\n    functionName,\n    args,\n    config,\n    chainId\n  >\n}\n"],"names":[],"mappings":";;;;;;;;;;AAmHO,eAAe,iBAWpB,MAAc,EACd,UAMC;IAID,MAAM,EAAE,GAAG,EAAE,OAAO,EAAE,SAAS,EAAE,GAAG,MAAM,GACxC;IAEF,IAAI;IACJ,IAAI,WAAW,OAAO,EAAE,UAAU,WAAW,OAAO;SAC/C;QACH,MAAM,kBAAkB,MAAM,CAAA,GAAA,2KAAA,CAAA,qBAAkB,AAAlB,EAAmB,QAAQ;YACvD;YACA;;QAEF,UAAU,gBAAgB,OAAO;IACnC;IAEA,MAAM,SAAS,OAAO,SAAS,CAAC;QAAE;IAAO;IACzC,MAAM,SAAS,CAAA,GAAA,gKAAA,CAAA,YAAS,AAAT,EAAU,QAAQ,iKAAA,CAAA,mBAAqB,EAAE;IACxD,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,GAAG,MAAM,OAAO;QAAE,GAAG,IAAI;QAAE;QAAK;IAAO;IAEhE,OAAO;QACL,SAAS,OAAO,KAAK,CAAC,EAAE;QACxB;QACA,SAAS;YAAE,QAAQ;YAAY,GAAG,OAAO;YAAE;QAAO;;AAQtD"}},
    {"offset": {"line": 2756, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2761, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@wagmi/core/src/actions/writeContract.ts"],"sourcesContent":["import type {\n  Abi,\n  Account,\n  Chain,\n  Client,\n  ContractFunctionArgs,\n  ContractFunctionName,\n} from 'viem'\nimport {\n  type WriteContractErrorType as viem_WriteContractErrorType,\n  type WriteContractParameters as viem_WriteContractParameters,\n  type WriteContractReturnType as viem_WriteContractReturnType,\n  writeContract as viem_writeContract,\n} from 'viem/actions'\n\nimport type { Config } from '../createConfig.js'\nimport type { BaseErrorType, ErrorType } from '../errors/base.js'\nimport type { SelectChains } from '../types/chain.js'\nimport type {\n  ChainIdParameter,\n  ConnectorParameter,\n} from '../types/properties.js'\nimport type { Compute, UnionCompute } from '../types/utils.js'\nimport { getAction } from '../utils/getAction.js'\nimport { getAccount } from './getAccount.js'\nimport {\n  type GetConnectorClientErrorType,\n  getConnectorClient,\n} from './getConnectorClient.js'\nimport {\n  type SimulateContractErrorType,\n  simulateContract,\n} from './simulateContract.js'\n\nexport type WriteContractParameters<\n  abi extends Abi | readonly unknown[] = Abi,\n  functionName extends ContractFunctionName<\n    abi,\n    'nonpayable' | 'payable'\n  > = ContractFunctionName<abi, 'nonpayable' | 'payable'>,\n  args extends ContractFunctionArgs<\n    abi,\n    'nonpayable' | 'payable',\n    functionName\n  > = ContractFunctionArgs<abi, 'nonpayable' | 'payable', functionName>,\n  config extends Config = Config,\n  chainId extends\n    config['chains'][number]['id'] = config['chains'][number]['id'],\n  ///\n  allFunctionNames = ContractFunctionName<abi, 'nonpayable' | 'payable'>,\n  chains extends readonly Chain[] = SelectChains<config, chainId>,\n> = UnionCompute<\n  {\n    // TODO: Should use `UnionStrictOmit<..., 'chain'>` on `viem_WriteContractParameters` result instead\n    // temp workaround that doesn't affect runtime behavior for for https://github.com/wevm/wagmi/issues/3981\n    [key in keyof chains]: viem_WriteContractParameters<\n      abi,\n      functionName,\n      args,\n      chains[key],\n      Account,\n      chains[key],\n      allFunctionNames\n    >\n  }[number] &\n    Compute<ChainIdParameter<config, chainId>> &\n    ConnectorParameter & { __mode?: 'prepared' }\n>\n\nexport type WriteContractReturnType = viem_WriteContractReturnType\n\nexport type WriteContractErrorType =\n  // getConnectorClient()\n  | GetConnectorClientErrorType\n  // simulateContract()\n  | SimulateContractErrorType\n  // base\n  | BaseErrorType\n  | ErrorType\n  // viem\n  | viem_WriteContractErrorType\n\n/** https://wagmi.sh/core/api/actions/writeContract */\nexport async function writeContract<\n  config extends Config,\n  const abi extends Abi | readonly unknown[],\n  functionName extends ContractFunctionName<abi, 'nonpayable' | 'payable'>,\n  args extends ContractFunctionArgs<\n    abi,\n    'nonpayable' | 'payable',\n    functionName\n  >,\n  chainId extends config['chains'][number]['id'],\n>(\n  config: config,\n  parameters: WriteContractParameters<abi, functionName, args, config, chainId>,\n): Promise<WriteContractReturnType> {\n  const { account, chainId, connector, __mode, ...rest } = parameters\n\n  let client: Client\n  if (typeof account === 'object' && account?.type === 'local')\n    client = config.getClient({ chainId })\n  else\n    client = await getConnectorClient(config, {\n      account: account ?? undefined,\n      chainId,\n      connector,\n    })\n\n  const { connector: activeConnector } = getAccount(config)\n\n  let request: any\n  if (__mode === 'prepared' || activeConnector?.supportsSimulation)\n    request = rest\n  else {\n    const { request: simulateRequest } = await simulateContract(config, {\n      ...rest,\n      account,\n      chainId,\n    } as any)\n    request = simulateRequest\n  }\n\n  const action = getAction(client, viem_writeContract, 'writeContract')\n  const hash = await action({\n    ...request,\n    ...(account ? { account } : {}),\n    chain: chainId ? { id: chainId } : null,\n  })\n\n  return hash\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;AAmFO,eAAe,cAWpB,MAAc,EACd,UAA6E;IAE7E,MAAM,EAAE,OAAO,EAAE,OAAO,EAAE,SAAS,EAAE,MAAM,EAAE,GAAG,MAAM,GAAG;IAEzD,IAAI;IACJ,IAAI,OAAO,YAAY,YAAY,SAAS,SAAS,SACnD,SAAS,OAAO,SAAS,CAAC;QAAE;IAAO;SAEnC,SAAS,MAAM,CAAA,GAAA,2KAAA,CAAA,qBAAkB,AAAlB,EAAmB,QAAQ;QACxC,SAAS,WAAW;QACpB;QACA;;IAGJ,MAAM,EAAE,WAAW,eAAe,EAAE,GAAG,CAAA,GAAA,mKAAA,CAAA,aAAU,AAAV,EAAW;IAElD,IAAI;IACJ,IAAI,WAAW,cAAc,iBAAiB,oBAC5C,UAAU;SACP;QACH,MAAM,EAAE,SAAS,eAAe,EAAE,GAAG,MAAM,CAAA,GAAA,yKAAA,CAAA,mBAAgB,AAAhB,EAAiB,QAAQ;YAClE,GAAG,IAAI;YACP;YACA;;QAEF,UAAU;IACZ;IAEA,MAAM,SAAS,CAAA,GAAA,gKAAA,CAAA,YAAS,AAAT,EAAU,QAAQ,8JAAA,CAAA,gBAAkB,EAAE;IACrD,MAAM,OAAO,MAAM,OAAO;QACxB,GAAG,OAAO;QACV,GAAI,UAAU;YAAE;QAAO,IAAK,CAAA,CAAE;QAC9B,OAAO,UAAU;YAAE,IAAI;QAAO,IAAK;;IAGrC,OAAO;AACT"}},
    {"offset": {"line": 2809, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2814, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@wagmi/core/src/query/writeContract.ts"],"sourcesContent":["import type { MutateOptions, MutationOptions } from '@tanstack/query-core'\nimport type { Abi, ContractFunctionArgs, ContractFunctionName } from 'viem'\n\nimport {\n  type WriteContractErrorType,\n  type WriteContractParameters,\n  type WriteContractReturnType,\n  writeContract,\n} from '../actions/writeContract.js'\nimport type { Config } from '../createConfig.js'\nimport type { Compute } from '../types/utils.js'\n\nexport function writeContractMutationOptions<config extends Config>(\n  config: config,\n) {\n  return {\n    mutationFn(variables) {\n      return writeContract(config, variables)\n    },\n    mutationKey: ['writeContract'],\n  } as const satisfies MutationOptions<\n    WriteContractData,\n    WriteContractErrorType,\n    WriteContractVariables<\n      Abi,\n      string,\n      readonly unknown[],\n      config,\n      config['chains'][number]['id']\n    >\n  >\n}\n\nexport type WriteContractData = Compute<WriteContractReturnType>\n\nexport type WriteContractVariables<\n  abi extends Abi | readonly unknown[],\n  functionName extends ContractFunctionName<abi, 'nonpayable' | 'payable'>,\n  args extends ContractFunctionArgs<\n    abi,\n    'nonpayable' | 'payable',\n    functionName\n  >,\n  config extends Config,\n  chainId extends config['chains'][number]['id'],\n  ///\n  allFunctionNames = ContractFunctionName<abi, 'nonpayable' | 'payable'>,\n> = WriteContractParameters<\n  abi,\n  functionName,\n  args,\n  config,\n  chainId,\n  allFunctionNames\n>\n\nexport type WriteContractMutate<config extends Config, context = unknown> = <\n  const abi extends Abi | readonly unknown[],\n  functionName extends ContractFunctionName<abi, 'nonpayable' | 'payable'>,\n  args extends ContractFunctionArgs<\n    abi,\n    'nonpayable' | 'payable',\n    functionName\n  >,\n  chainId extends config['chains'][number]['id'],\n>(\n  variables: WriteContractVariables<abi, functionName, args, config, chainId>,\n  options?:\n    | MutateOptions<\n        WriteContractData,\n        WriteContractErrorType,\n        WriteContractVariables<\n          abi,\n          functionName,\n          args,\n          config,\n          chainId,\n          // use `functionName` to make sure it's not union of all possible function names\n          functionName\n        >,\n        context\n      >\n    | undefined,\n) => void\n\nexport type WriteContractMutateAsync<\n  config extends Config,\n  context = unknown,\n> = <\n  const abi extends Abi | readonly unknown[],\n  functionName extends ContractFunctionName<abi, 'nonpayable' | 'payable'>,\n  args extends ContractFunctionArgs<\n    abi,\n    'nonpayable' | 'payable',\n    functionName\n  >,\n  chainId extends config['chains'][number]['id'],\n>(\n  variables: WriteContractVariables<abi, functionName, args, config, chainId>,\n  options?:\n    | MutateOptions<\n        WriteContractData,\n        WriteContractErrorType,\n        WriteContractVariables<\n          abi,\n          functionName,\n          args,\n          config,\n          chainId,\n          // use `functionName` to make sure it's not union of all possible function names\n          functionName\n        >,\n        context\n      >\n    | undefined,\n) => Promise<WriteContractData>\n"],"names":[],"mappings":";;;;;;AAYM,SAAU,6BACd,MAAc;IAEd,OAAO;QACL,YAAW,SAAS;YAClB,OAAO,CAAA,GAAA,sKAAA,CAAA,gBAAa,AAAb,EAAc,QAAQ;QAC/B;QACA,aAAa;YAAC;SAAgB;;AAYlC"}},
    {"offset": {"line": 2830, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}